<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes | Wenlin Chen</title>
    <link>https://wenlin-chen.github.io/post/</link>
      <atom:link href="https://wenlin-chen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Notes</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2024 Wenlin Chen</copyright><lastBuildDate>Sun, 09 Jun 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://wenlin-chen.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Notes</title>
      <link>https://wenlin-chen.github.io/post/</link>
    </image>
    
    <item>
      <title>Score and Flow Matching</title>
      <link>https://wenlin-chen.github.io/post/score_flow_matching/</link>
      <pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://wenlin-chen.github.io/post/score_flow_matching/</guid>
      <description>&lt;h2 id=&#34;generative-modeling&#34;&gt;Generative Modeling&lt;/h2&gt;
&lt;h3 id=&#34;problem-setting&#34;&gt;Problem Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data distribution $p_{\text{data}}(x)$ is unknown.&lt;/li&gt;
&lt;li&gt;Samples from $p_{\text{data}}(x)$ are available.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;goals&#34;&gt;Goals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Estimate the density of the data distribution $p_{\text{data}}(x)$.&lt;/li&gt;
&lt;li&gt;Generate new samples from $p_{\text{data}}(x)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;score-matching-for-diffusion-models&#34;&gt;Score Matching for Diffusion Models&lt;/h2&gt;
&lt;h3 id=&#34;notation&#34;&gt;Notation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Denote data by $x_0=x$ and noise by $x_T$.&lt;/li&gt;
&lt;li&gt;Wiener process SDE ($dt&amp;gt;0$):
$$dw_t=z\sqrt{dt},\quad z\sim\mathcal{N}(0,I).$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diffusion-process&#34;&gt;Diffusion Process&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Forward diffusion SDE ($dt&amp;gt;0$):
$$dx_t=f_t(x_t)dt+g_tdw_t.$$
&lt;ul&gt;
&lt;li&gt;Forward diffusion SDE corrupts data to noise.&lt;/li&gt;
&lt;li&gt;$f_t(x_t)$ is a vector-valued drift coefficient.&lt;/li&gt;
&lt;li&gt;$g_t$ is a scalar-valued diffusion coefficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reverse diffusion SDE ($dt&amp;lt;0$):
$$dx_t=\left(f_t(x_t)-g_t^2\nabla_{x_t} \log p_t(x_t)\right)dt + g_tdw_t.$$
&lt;ul&gt;
&lt;li&gt;Reverse diffusion SDE recovers data from noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Probability flow ODE ($dt&amp;lt;0$):
$$dx_t=\left(f_t(x_t)-\frac{1}{2}g_t^2\nabla_{x_t} \log p_t(x_t)\right)dt.$$
&lt;ul&gt;
&lt;li&gt;Probability flow ODE and reverse diffusion SDE have the same marginal $p_t(x_t)$ at every time $t$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;denoising-score-matching&#34;&gt;Denoising Score Matching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To generate data using the reverse diffusion SDE or probability flow PDE starting from a tractable noise distribution $\pi(x_T)$, we need to estimate the score $\nabla_{x_t} \log p_t(x_t)$ at every time $t$.&lt;/li&gt;
&lt;li&gt;Learn a time-dependent score network $s_{\theta}(x_t, t)$ by minimizing the score matching objetive:
$$\mathcal{L}_{SM}(\theta) = \mathbb{E}_{p_t(x_t)\mathcal{U}(t|0,T)}[\lambda(t)\lVert s_{\theta}(x_t, t) - \nabla_{x_t} \log p_t(x_t)\rVert^2].$$
&lt;ul&gt;
&lt;li&gt;The score matching objective is intractable since we do not know the true score $\nabla_{x_t} \log p_t(x_t)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We instead minimize the tractable denoising score matching objective:
$$\mathcal{L}_{DSM}(\theta)=\mathbb{E}_{p_{t|0}(x_t|x_0)p_{\text{data}}(x_0)\mathcal{U}(t|0,T)}[\lambda(t)\lVert s_{\theta}(x_t, t) - \nabla_{x_t} \log p_{t|0}(x_t|x_0)\rVert^2].$$
&lt;ul&gt;
&lt;li&gt;It can be shown that $\nabla_{\theta}\mathcal{L}_{SM}(\theta)=\nabla_{\theta}\mathcal{L}_{DSM}(\theta).$&lt;/li&gt;
&lt;li&gt;Proof: See my notes on &lt;a href=&#34;https://wenlin-chen.github.io/post/score_identities&#34;&gt;Score Identities for Sampling and Generative Modeling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weighting function $\lambda(t)$:
&lt;ul&gt;
&lt;li&gt;Magnitude weighting balances the magnitude of the score matching loss across time $t$:
$$\lambda(t)\propto1/\lVert \nabla_{x_t} \log p_{t|0}(x_t|x_0)\rVert^2.$$&lt;/li&gt;
&lt;li&gt;Likelihood weighting $\lambda(t)=g_t^2$ leads to a nice connection between KL divergence and Fisher divergence:
$$\text{KL}(p_{\text{data}}(x_0)||p_{\theta}(x_0))\leq\frac{T}{2}\mathbb{E}_{p_t(x_t)\mathcal{U}(t|0,T)}[g_t^2\lVert s_{\theta}(x_t, t) - \nabla_{x_t} \log p_t(x_t)\rVert^2]+\text{KL}(p_T(x_T)||\pi(x_T)).$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One problem with denoising score matching is that the score network $s_{\theta}(x_t,t)$ is inaccurate for very small $t$ due to the large magnitude of $\nabla_{x_t} \log p_{t|0}(x_t|x_0)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flow-matching-for-continuous-normalizing-flows&#34;&gt;Flow Matching for Continuous Normalizing Flows&lt;/h2&gt;
&lt;h3 id=&#34;notation-1&#34;&gt;Notation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Denote data by $x_T=x$ and noise by $x_0$
&lt;ul&gt;
&lt;li&gt;This follows the convention in flow matching.&lt;/li&gt;
&lt;li&gt;Note: this is the opposite to the definition in diffusion models.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;discrete-normalizing-flow&#34;&gt;Discrete Normalizing Flow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discrete normalzing flow with an invertible transformation function $\phi$ (and $T=1$):
$$x_1=\phi(x_0),\quad x_0\sim\pi(x_0),$$
$$\log p(x_1)=\log \pi(\phi^{-1}(x_1)) +\log\left|\det\frac{\partial \phi^{-1}(x_1)}{\partial x_1}\right|.$$&lt;/li&gt;
&lt;li&gt;Compose $T$ discrete normalizing flows:
$$x_{t+1}=\phi_{t}(x_t),$$
$$\phi=\phi_{T-1}\circ\cdots\circ\phi_0,$$
$$\log p(x_T)=\log \pi(\phi^{-1}(x_T)) +\sum_{t=1}^T\log\left|\det\frac{\partial \phi_{t-1}^{-1}(x_t)}{\partial x_{t}}\right|.$$&lt;/li&gt;
&lt;li&gt;Discrete residual flow transformation:
$$\phi_t(x_t)=x_{t+1}=x_t+\delta u_t(x_t).$$
&lt;ul&gt;
&lt;li&gt;$u_t$ needs to be $1/\delta$-Lipschitz to guarantee the invertibility of $\phi_t$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Learn a parametric flow transformation function $\phi_{\theta}$ by MLE:
$$\max_{\theta}~\mathbb{E}_{p_{\text{data}}(x_T)}[\log p_{\theta}(x_T)].$$
&lt;ul&gt;
&lt;li&gt;We need to enforce invertibility in the architecture of $\phi_{\theta}$.&lt;/li&gt;
&lt;li&gt;We need to compute and backpropagate through the inverse and Jacobian for $\phi_{\theta}$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;continuous-normalizing-flow&#34;&gt;Continuous Normalizing Flow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Continuous residual flow transformation:
$$x_{t+\delta}=x_t+\delta u_t(x_t).$$
$$u_t(x_t)=\lim_{\delta\to0}\frac{x_{t+\delta}-x_t}{\delta}=\frac{dx_t}{dt}.$$&lt;/li&gt;
&lt;li&gt;Continuous normalizing flow with a transformation function $\phi_t$ induced by the vector field $u_t$:
$$\frac{dx_t}{dt}=u_t(x_t)\quad\implies\quad x_t=x_0+\int_0^t u_s(x_s)ds,\quad x_0\sim\pi(x_0),$$
&lt;ul&gt;
&lt;li&gt;Set $T=1$ following convention.&lt;/li&gt;
&lt;li&gt;The flow transformation is defined as $x_t=\phi_t(x_0)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The probability path $p_t$ induced by the vector field $u_t$ follows
$$\frac{d}{dt}\log p_t(x_t)=-\nabla_{x_t}\cdot u_t(x_t)\quad\implies\quad\log p_t(x_t)=\log\pi(x_0)-\int_{0}^t\nabla_{x_s}\cdot u_s(x_s)ds.$$
&lt;ul&gt;
&lt;li&gt;Proof: By the transport equation, we have
$$
\begin{aligned}
\frac{\partial}{\partial t} p_t(x_t)
&amp;amp;= -\nabla_{x_t}\cdot(u_t(x_t)p_t(x_t)) \\
&amp;amp;= -p_t(x_t)\nabla_{x_t}\cdot u_t(x_t)-\left&amp;lt;\nabla_{x_t}p_t(x_t),u_t(x_t)\right&amp;gt;.
\end{aligned}$$
The total derivative is then given by
$$
\begin{aligned}
\frac{d}{d t} p_t(x_t)
&amp;amp;= \frac{\partial}{\partial t} p_t(x_t) + \left&amp;lt;\nabla_{x_t}p_t(x_t),\frac{dx_t}{d t}\right&amp;gt; \\
&amp;amp;= -p_t(x_t)\nabla_{x_t}\cdot u_t(x_t)-\left&amp;lt;\nabla_{x_t}p_t(x_t),u_t(x_t)\right&amp;gt; + \left&amp;lt;\nabla_{x_t}p_t(x_t),u_t(x_t)\right&amp;gt; \\
&amp;amp;= -p_t(x_t)\nabla_{x_t}\cdot u_t(x_t).
\end{aligned}
$$
Therefore, we have
$$\frac{d}{dt}\log p_t(x_t)=\frac{1}{p_t(x_t)}\frac{d}{d t} p_t(x_t)=-\nabla_{x_t}\cdot u_t(x_t).$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In practice, both $x_t$ and $\log p_t(x_t)$ can be solved jointly using a numerical ODE integrator:
$$
\frac{d}{dt}
\begin{pmatrix}
x_t \\
\log p_t(x_t)
\end{pmatrix}=
\begin{pmatrix}
u_t(x_t) \\
-\nabla_{x_t}\cdot u_t(x_t)
\end{pmatrix}.
$$&lt;/li&gt;
&lt;li&gt;Note that there are many different vector fields $u_t$ that can induce probability paths between $p_0$ and $p_1$.&lt;/li&gt;
&lt;li&gt;Learn a parameteric time-dependent vector field $u_{\theta}(x_t, t)$ by MLE:
$$\max_{\theta}~\mathbb{E}_{p_{\text{data}}(x_1)}[\log p_{\theta}(x_1)].$$
&lt;ul&gt;
&lt;li&gt;We do not need to choose the number of flow transformations as in composed discrete normalizing flows.&lt;/li&gt;
&lt;li&gt;$u_t$ only needs to be $L$-Lipschitz with any value $L$ to guarantee the invertibility of $\phi_t$.&lt;/li&gt;
&lt;li&gt;Numerical simulation of the ODE with backpropagation makes training very slow and expensive.&lt;/li&gt;
&lt;li&gt;Divergence estimator scales poorly with dimensionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conditional-flow-matching&#34;&gt;Conditional Flow Matching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We want a simulation-free objective like score matching.&lt;/li&gt;
&lt;li&gt;Learn a time-dependent vector field $u_{\theta}(x_t, t)$ by minimizing the flow matching objetive:
$$\mathcal{L}_{FM}(\theta)=\mathbb{E}_{p_t(x_t)\mathcal{U}(t|0,1)}[\lVert u_{\theta}(x_t, t)-u_t(x_t)\rVert^2].$$
&lt;ul&gt;
&lt;li&gt;The flow matching objective is intractable since we do not know the true vector field $u_t(x_t)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To circumvent the intractability, we consider a specific probability path $p_t(x_t)$ defined by a conditional probability path $p_{t|1}(x_t|x_1)$:
$$p_t(x_t)=\int p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)dx_1,$$
with boundary conditions
$$p_{0|1}(x)=\pi(x)\implies p_0(x_0)=\pi(x_0),$$
$$p_{1|1}(x)=\delta(x-x_1)\implies p_1(x_1)=p_{\text{data}}(x_1).$$&lt;/li&gt;
&lt;li&gt;The marginal vector field $u_t$ can be obtained from the corresponding conditional vector field $u_{t|1}(x_t|x_1)$ and conditional probability path $p_{t|1}(x_t|x_1)$ through the following identity:
$$u_t(x_t)=\mathbb{E}_{p_{1|t}(x_1|x_t)}[u_{t|1}(x_t|x_1)]=\int u_{t|1}(x_t|x_1)\frac{p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)}{p_t(x_t)}dx_1.$$
&lt;ul&gt;
&lt;li&gt;Proof: We verify that this is consistent with the transport equation for the marginals.
$$
\begin{aligned}
\frac{\partial}{\partial t}p_t(x_t)
&amp;amp;= \frac{\partial}{\partial t} \int p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)dx_1 \\
&amp;amp;= \int \frac{\partial}{\partial t} p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)dx_1 \\
&amp;amp;= - \int \nabla_{x_t}\cdot (u_{t|1}(x_t|x_1)p_{t|1}(x_t|x_1)) p_{\text{data}}(x_1)dx_1 \\
&amp;amp;= - \int \nabla_{x_t}\cdot (u_{t|1}(x_t|x_1)p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)) dx_1 \\
&amp;amp;= - \nabla_{x_t}\cdot  \int  u_{t|1}(x_t|x_1)p_{t|1}(x_t|x_1)p_{\text{data}}(x_1) dx_1  \\
&amp;amp;= - \nabla_{x_t}\cdot \left( \int  u_{t|1}(x_t|x_1)\frac{p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)}{p_t(x_t)} dx_1 p_t(x_t) \right) \\
&amp;amp;= - \nabla_{x_t}\cdot (u_t(x_t) p_t(x_t)). \\
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We now introduce a tractable conditional flow matching objective:
$$\mathcal{L}_{CFM}(\theta)=\mathbb{E}_{p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)\mathcal{U}(t|0,1)}[\lVert u_{\theta}(x_t,t)-u_{t|1}(x_t|x_1) \rVert^2].$$
&lt;ul&gt;
&lt;li&gt;It can be shown that $\nabla_{\theta}\mathcal{L}_{FM}(\theta)=\nabla_{\theta}\mathcal{L}_{CFM}(\theta)$.&lt;/li&gt;
&lt;li&gt;Proof: We follow a similar idea to the proof of denoising score matching but with the following equality.
$$
\begin{aligned}
\mathbb{E}_{p_t(x_t)}[\left&amp;lt;u_{\theta}(x_t,t),u_t(x_t)\right&amp;gt;]
&amp;amp;= \int \left&amp;lt;u_{\theta}(x_t,t),u_t(x_t)\right&amp;gt; p_t(x_t) dx_t \\
&amp;amp;= \int \left&amp;lt;u_{\theta}(x_t,t),\int u_{t|1}(x_t|x_1)\frac{p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)}{p_t(x_t)}dx_1\right&amp;gt; p_t(x_t) dx_t \\
&amp;amp;= \iint \left&amp;lt;u_{\theta}(x_t,t),u_{t|1}(x_t|x_1)\right&amp;gt; p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)dx_1 dx_t \\
&amp;amp;= \mathbb{E}_{p_{t|1}(x_t|x_1)p_{\text{data}}(x_1)}[\left&amp;lt;u_{\theta}(x_t,t),u_{t|1}(x_t|x_1)\right&amp;gt;].
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In practice, we may want our conditional vector field $u_{t|1}$ to generate a conditional Gaussian probability path:
$$p_{t|1}(x_t|x_1)=\mathcal{N}(x_t|\mu_t(x_1),\sigma_t(x_1)^2I),$$
with boundary conditions
$$\mu_0(x_1)=0,~\sigma_0(x_1)=1\quad\implies\quad p_{0|1}(x|x_1)=\pi(x)=\mathcal{N}(x|0,I),$$
$$\mu_1(x_1)=x_1,\quad\sigma_1(x_1)=0\quad\implies\quad p_{1|1}(x|x_1)=\delta(x-x_1).$$
&lt;ul&gt;
&lt;li&gt;One correpsonding conditional vector field is given by
$$u_{t|1}(x_t|x_1)=\frac{x-\mu_t(x_1)}{\sigma_t(x_1)}\frac{d\sigma_t(x_1)}{d t}+\frac{d \mu_t(x_1)}{d t},$$
with a conditional flow transformation
$$\phi_{t|1}(x_0|x_1)=\mu_t(x_1)+\sigma_t(x_1)x_0.$$&lt;/li&gt;
&lt;li&gt;Proof: We verify that the following two quantities are identical.
$$\frac{d}{dt}\phi_{t|1}(x_0|x_1)=\frac{d}{dt}\mu_t(x_1)+x_0\frac{d}{dt}\sigma_t(x_1),$$
and
$$
\begin{aligned}
u_{t|1}(\phi_{t|1}(x_0|x_1)|x_1)
&amp;amp;= \frac{\mu_t(x_1)+\sigma_t(x_1)x_0-\mu_t(x_1)}{\sigma_t(x_1)}\frac{d\sigma_t(x_1)}{d t}+\frac{d \mu_t(x_1)}{d t} \\
&amp;amp;=x_0\frac{d}{dt}\sigma_t(x_1)+\frac{d}{dt}\mu_t(x_1).
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two problems with conditional flow matching:
&lt;ul&gt;
&lt;li&gt;The estimate of the gradient $\nabla_{\theta} \mathcal{L}_{CFM}(\theta)$ is of high variance since there are many possible data $x_1$ corresponding to a noise $x_0$ due to intersection of probability paths for different realizations of $u_{t|1}(x_t|x_1)$ with different values of the conditioning variable $x_1$.&lt;/li&gt;
&lt;li&gt;Sampling is slow at generation time since it is difficult to integrate ODE with non-straight path induced by the learned marginal vector field $u_{\theta}(u_t,t)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coupling: instead of maping between data $x_1$ and noise $x_0$ (i.e., one-sided conditioning), we can similarly map between any two variables $x_0$ and $x_1$ with two-sided conditioning:
$$p_t(x_t)=\iint p_{t|0,1}(x_t|x_0,x_1)p_{\text{data}}(x_0,x_1)dx_0dx_1,$$
with boundary conditions
$$p_{0|0,1}(x|x_0,x_1)=\delta(x-x_0)\implies p_0(x_0)=p_{\text{data}}(x_0),$$
$$p_{1|0,1}(x|x_0,x_1)=\delta(x-x_1)\implies p_1(x_1)=p_{\text{data}}(x_1).$$&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Score Identities</title>
      <link>https://wenlin-chen.github.io/post/score_identities/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://wenlin-chen.github.io/post/score_identities/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;h3 id=&#34;problem-setting&#34;&gt;Problem Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data distribution:
$$p(x)=\frac{\exp(-E(x))}{Z}.$$
&lt;ul&gt;
&lt;li&gt;Intractable normalizing constant:
$$Z=\int \exp(-E(x)) dx.$$&lt;/li&gt;
&lt;li&gt;Tractable score function:
$$\nabla_x \log p(x)=-\nabla_x E(x).$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generative Modeling:
&lt;ul&gt;
&lt;li&gt;Samples from $p(x)$ are available.&lt;/li&gt;
&lt;li&gt;The energy function $E$ is unknown and needs to be learned from data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sampling:
&lt;ul&gt;
&lt;li&gt;The energy function $E$ is given.&lt;/li&gt;
&lt;li&gt;Samples from $p(x)$ are not available.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diffusion&#34;&gt;Diffusion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gaussian convolution kernel:
$$p(y|x)=\mathcal{N}(y|\alpha x,\sigma^2 I).$$&lt;/li&gt;
&lt;li&gt;Intractable noisy marginal:
$$p(y)=\int p(y|x)p(x)dx.$$&lt;/li&gt;
&lt;li&gt;Intractable denoising posterior:
$$p(x|y)=\frac{p(y|x)p(x)}{p(y)}.$$&lt;/li&gt;
&lt;li&gt;Intractable noisy score:
$$\nabla_y\log p(y)=\nabla_y\log \int p(y|x)p(x)dx.$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;score-identities&#34;&gt;Score Identities&lt;/h2&gt;
&lt;h3 id=&#34;denoising-score-identity&#34;&gt;Denoising Score Identity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Denoising score identity is a general formula without assumping the form of $p(y|x)$:
$$\nabla_y\log p(y)=\mathbb{E}_{p(x|y)}[\nabla_y\log p(y|x)]=\int\nabla_y\log p(y|x) p(x|y)dx.$$&lt;/li&gt;
&lt;li&gt;Proof: By definition, we have
$$
\begin{aligned}
\nabla_y\log p(y)
&amp;amp;= \frac{\int\nabla_y p(y|x)p(x)dx}{p(y)} \\
&amp;amp;= \int\nabla_y\log(y|x)\frac{p(y|x)p(x)}{p(y)}dx \\
&amp;amp;= \int\nabla_y\log p(y|x) p(x|y)dx.
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tweedie-score-identity&#34;&gt;Tweedie Score Identity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tweedie score identity assumes Gaussian convolution $p(y|x)=\mathcal{N}(y|\alpha x,\sigma^2 I)$:
$$\nabla_y\log p(y)=\frac{\alpha\mathbb{E}_{p(x|y)}[ x ]-y}{\sigma^2}=\int\left(\frac{\alpha x-y}{\sigma^2}\right)p(x|y)dx.$$&lt;/li&gt;
&lt;li&gt;Proof: By denoising score identity, we have
$$
\begin{aligned}
\nabla_y\log p(y)
&amp;amp;= \int\nabla_y\log p(y|x) p(x|y)dx \\
&amp;amp;= \int\nabla_y\left(-\frac{\lVert y-\alpha x\rVert^2}{2\sigma^2}\right) p(x|y)dx \\
&amp;amp;= \int \left(\frac{\alpha x-y}{\sigma^2}\right)p(x|y)dx.
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;target-score-identity&#34;&gt;Target Score Identity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Target score identity assumes Gaussian convolution $p(y|x)=\mathcal{N}(y|\alpha x,\sigma^2 I)$:
$$\nabla_y\log p(y)=\alpha^{-1}\mathbb{E}_{p(x|y)}[\nabla_x\log p(x)]=\alpha^{-1}\int \nabla_x\log p(x) p(x|y) dx.$$&lt;/li&gt;
&lt;li&gt;Proof: By denoising score identity and using the following three identities
$$\nabla_y \log p(y|x)=-\alpha^{-1}\nabla_x \log p(y|x),$$
$$\nabla_x \log p(y|x)=\nabla_x\log p(x|y)-\nabla_x \log p(x),$$
$$\int \nabla_x\log p(x|y)p(x|y)dx=\int \nabla_xp(x|y)dx=\nabla_x\int p(x|y)dx=0,$$
we have
$$
\begin{aligned}
\nabla_y\log p(y)
&amp;amp;= \int\nabla_y\log p(y|x) p(x|y)dx \\
&amp;amp;= -\alpha^{-1}\int\nabla_x\log p(y|x) p(x|y)dx \\
&amp;amp;= \alpha^{-1}\int(\nabla_x \log p(x)-\nabla_x\log p(x|y)) p(x|y)dx \\
&amp;amp;= \alpha^{-1}\int\nabla_x \log p(x) p(x|y)dx.
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mixed-score-identity&#34;&gt;Mixed Score Identity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mixed score identity assumes Gaussian convolution $p(y|x)=\mathcal{N}(y|\alpha x,\sigma^2 I)$ with a variance-preserving scheme $\sigma^2=1-\alpha^2$:
$$\nabla_y\log p(y)=\mathbb{E}_{p(x|y)}[\alpha(x+\nabla_x\log p(x))-y]=\int (\alpha(x+\nabla_x\log p(x))-y) p(x|y) dx.$$
Proof: Consider a convex combination of the target score identity and Tweedie score identity with coefficients $\alpha^2$ and $1-\alpha^2$:
$$
\begin{aligned}
\nabla_y\log p(y)
&amp;amp;= \int \left((\alpha^2\frac{\nabla_x \log p(x)}{\alpha} + (1-\alpha^2)\frac{\alpha x - y}{\sigma^2}\right)p(x|y)dx \\
&amp;amp;= \int (\alpha(x+\nabla_x\log p(x))-y) p(x|y) dx.
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;score-based-sampling&#34;&gt;Score-based Sampling&lt;/h2&gt;
&lt;h3 id=&#34;monte-carlo-estimator&#34;&gt;Monte Carlo Estimator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Estimate the noisy score with Tweedie score identity using Monte Carlo:
$$\nabla_y \log p(y)\approx \frac{\frac{\alpha}{K}\sum_{k=1}^K x_k-y}{\sigma^2},\quad x_k\sim p(x|y).$$&lt;/li&gt;
&lt;li&gt;We may initialize the sampler for $p(x|y)$ with its mean $\mathbb{E}_{p(x|y)}[ x ]$ estimated by importance sampling:
$$\mathbb{E}_{p(x|y)}[ x ]\approx\frac{\sum_{l=1}^L x_l\exp(-E(x_l))}{\sum_{l=1}^L \exp(-E(x_{l}))},\quad x_l\sim q(x|y)=\mathcal{N}\left(x\left|\frac{y}{\alpha},\left(\frac{\sigma}{\alpha}\right)^2I\right)\right..$$
This is the standard importance sampling approach. It does not work well in high dimensional space.&lt;/li&gt;
&lt;li&gt;Proof: Using the fact that $q(x|y)\propto p(y|x)$, we have
$$
\begin{aligned}
\mathbb{E}_{p(x|y)}[ x ]
&amp;amp;= \int x p(x|y)dx \\
&amp;amp;= \int x \frac{p(y|x)p(x)}{p(y)}dx \\
&amp;amp;= \frac{\int x p(y|x)p(x)dx}{\int p(y|x)p(x)dx} \\
&amp;amp;= \frac{\int x \exp(-E(x))q(x|y)dx}{\int \exp(-E(x))q(x|y)dx} \\
&amp;amp;\approx \frac{\sum_{l=1}^L x_l\exp(-E(x_l))}{\sum_{l=1}^L \exp(-E(x_{l}))},\quad x_l\sim q(x|y).
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;importance-sampling-estimator&#34;&gt;Importance Sampling Estimator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Estimate the noisy score with the target score identity using importance sampling:
$$\nabla_y \log p(y)\approx -\frac{\sum_{k=1}^K \exp(-E(x_k))\nabla_x E(x_k)}{\alpha\sum_{k=1}^K \exp(-E(x_k))},\quad x_k\sim q(x|y)=\mathcal{N}\left(x\left|\frac{y}{\alpha},\left(\frac{\sigma}{\alpha}\right)^2I\right)\right..$$
This does not work well in practice as it only works for very small $t$.&lt;/li&gt;
&lt;li&gt;Proof: Using target score identity and the fact that $q(x|y)\propto p(y|x)$, we have
$$
\begin{aligned}
\nabla_y\log p(y)
&amp;amp;= \alpha^{-1}\int \nabla_x\log p(x) p(x|y) dx \\
&amp;amp;= \frac{\int \nabla_x\log p(x) p(y|x)p(x) dx}{\alpha p(y)} \\
&amp;amp;= \frac{\int \nabla_x\log p(x) p(y|x)p(x) dx}{\alpha \int p(y|x)p(x)dx} \\
&amp;amp;= \frac{\int \nabla_x\log p(x) \exp(-E(x)) q(x|y) dx}{\alpha \int \exp(-E(x)) q(x|y)dx} \\
&amp;amp;\approx -\frac{\sum_{k=1}^K \exp(-E(x_k))\nabla_x E(x_k)}{\alpha\sum_{k=1}^K \exp(-E(x_k))},\quad x_k\sim q(x|y).
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;score-based-generative-modeling&#34;&gt;Score-based Generative Modeling&lt;/h2&gt;
&lt;h3 id=&#34;denoising-score-matching&#34;&gt;Denoising Score Matching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn a noisy score network $s_{\theta}(y)$ by minimizing
$$
\begin{aligned}
\mathcal{L}(\theta)
&amp;amp;= \mathbb{E}_{p(y)}[\lVert s_{\theta}(y) - \nabla_y \log p(y)\rVert^2] \\
&amp;amp;= \mathbb{E}_{p(y|x)p(x)}[\lVert s_{\theta}(y) - \nabla_y \log p(y|x)\rVert^2]+C.
\end{aligned}
$$
This is the most popular generative modeling apporach. It is inaccurate for very small $t$.&lt;/li&gt;
&lt;li&gt;Proof: Using the denoising score identity, we have
$$
\begin{aligned}
\mathbb{E}_{p(y)}[\lVert s_{\theta}(y) - \nabla_y \log p(y)\rVert^2]
&amp;amp;= \int \lVert s_{\theta}(y) - \nabla_y \log p(y)\rVert^2 p(y) dy \\
&amp;amp;= \int \lVert s_{\theta}(y) \rVert^2 p(y) dy - 2 \int \left&amp;lt;s_{\theta}(y),\nabla_y \log p(y)\right&amp;gt;p(y)dy + C&amp;rsquo; \\
&amp;amp;= \int \lVert s_{\theta}(y) \rVert^2 p(y) dy - 2 \iint \left&amp;lt;s_{\theta}(y),\nabla_y\log p(y|x) \right&amp;gt;p(x|y)p(y)dxdy + C&amp;rsquo; \\
&amp;amp;= \int \lVert s_{\theta}(y) \rVert^2 p(y) dy - 2 \iint \left&amp;lt;s_{\theta}(y),\nabla_y\log p(y|x) \right&amp;gt;p(y|x)p(x)dxdy + C&amp;rsquo; \\
&amp;amp;= \iint \left( \lVert s_{\theta}(y) \rVert^2 + \lVert \nabla_y\log p(y|x) \rVert^2 - 2 \left&amp;lt;s_{\theta}(y),\nabla_y\log p(y|x) \right&amp;gt;\right)p(y|x)p(x)dxdy + C \\
&amp;amp;= \iint \lVert s_{\theta}(y) - \nabla_y \log p(y|x)\rVert^2 p(y|x)p(x)dxdy + C \\
&amp;amp;= \mathbb{E}_{p(y|x)p(x)}[\lVert s_{\theta}(y) - \nabla_y \log p(y|x)\rVert^2]+C.
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nonparametric-estimator&#34;&gt;Nonparametric Estimator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Estimate the noisy score with the target score identity using with a KDE-style estimator:
$$\nabla_y \log p(y)\approx\frac{\sum_{k=1}^K p(y|x_k)\nabla_y \log p(y|x_k)}{\sum_{k=1}^K p(y|x_k)},\quad x_k\sim p(x).$$
This is expensive to evaluate and needs to be recomputed for different values of $y$.&lt;/li&gt;
&lt;li&gt;Proof: By definition of noisy score, we have
$$
\begin{aligned}
\nabla_y\log p(y)
&amp;amp;= \nabla_y\log \int p(y|x)p(x)dx \\
&amp;amp;\approx \nabla_y\log\sum_{k=1}^K p(y|x_k),\quad x_k\sim p(x) \\
&amp;amp;= \frac{\sum_{k=1}^K \nabla_y p(y|x_k)}{\sum_{k=1}^K p(y|x_k)},\quad x_k\sim p(x) \\
&amp;amp;= \frac{\sum_{k=1}^K p(y|x_k)\nabla_y \log p(y|x_k)}{\sum_{k=1}^K p(y|x_k)},\quad x_k\sim p(x).
\end{aligned}
$$&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tensor Algebra</title>
      <link>https://wenlin-chen.github.io/post/tensor_algebra/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://wenlin-chen.github.io/post/tensor_algebra/</guid>
      <description>&lt;h3 id=&#34;motivation-and-applications-of-tensors&#34;&gt;Motivation and Applications of Tensors&lt;/h3&gt;
&lt;p&gt;Tensors provide insights about how geometry works. Below are some examples that involve tensors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General relativity (metric tensor):
&lt;ul&gt;
&lt;li&gt;curved space-time,&lt;/li&gt;
&lt;li&gt;expanding universe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Quantum mechanics and quantum computing:
&lt;ul&gt;
&lt;li&gt;quantum superposition (linear combination),&lt;/li&gt;
&lt;li&gt;quantum engtanglement (tensor product).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimization.&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;definitions-of-tensors&#34;&gt;Definitions of Tensors&lt;/h3&gt;
&lt;p&gt;Roughtly speaking, tensors are objects defined by the way they transform. Tensor algbra focuses on the analysis of individual tensors, which generalizes linear algebra. Tensor calculus focuses on the analysis of tensor fields, which generalizes multivariate calculus.&lt;/p&gt;
&lt;p&gt;Formally, there are several definitions of tensors from different perspectives.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;(Array Definition) A tensors is a multi-dimensional array, such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rank-0 tensor: scalar,&lt;/li&gt;
&lt;li&gt;rank-1 tensor: vector,&lt;/li&gt;
&lt;li&gt;rank-2 tensor: matrix,&lt;/li&gt;
&lt;li&gt;rank-3 tensor: ?,&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a good definition as arrays are not what tensors fundamentally are. The array definition ignores the geometric meaning behind tensors and is not helpful for understanding geometry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Coordinate Definition) A tensor is an object invariant under a change of coordinates, which has components that change in a special, predictable way under a change of coordinates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A tensor object itself is intrinsic and does not depend on the choice of coordinate system.&lt;/li&gt;
&lt;li&gt;The components of a tensor change under different coordinate systems in a specific way that can be figured out. We will get to this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Algebra Definition) A tensor is a collection of vectors and covectors combined together using the tensor product.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is a consice and probably the best definition of tensors.&lt;/li&gt;
&lt;li&gt;But&amp;hellip; What are covectors? What is tensor product? We will get to this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Calculus Definition) Tensors are partial derivatives and gradients that transform with the Jacobian matrix.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is also a useful definition, but we will focus on the coordinate and algebra definitions in tensor algebra.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will begin with special examples of tensors that we have seen in linear algebra and then gradually generalize the concept of tensors. For notational simplicity, we will use Einstein&amp;rsquo;s notation, which drops the summation symbols $\sum$ since they can be inferred from the context by contracting all corresponding upper and lower indices.&lt;/p&gt;
&lt;h3 id=&#34;change-of-basis&#34;&gt;Change of Basis&lt;/h3&gt;
&lt;p&gt;Consider an old basis $E=[\mathbf{e}_1,\cdots,\mathbf{e}_n]$ and a new basis $\tilde{E}=[\tilde{\mathbf{e}}_1,\cdots,\tilde{\mathbf{e}}_n]$.&lt;/p&gt;
&lt;p&gt;The forward transformation $F$ builds the new basis from the old basis:
$$
\tilde{\mathbf{e}}_i = F^j_i\mathbf{e}_j.
$$&lt;/p&gt;
&lt;!-- or in the matrix-vector equation form:
$$
[\tilde{\mathbf{e}}_1,\cdots,\tilde{\mathbf{e}}_n]=[\mathbf{e}_1,\cdots,\mathbf{e}_n]
\begin{bmatrix}
F^1_1 &amp; \cdots &amp; F^1_n \\\\
\vdots &amp; \ddots &amp; \vdots \\\\
F^n_1 &amp; \cdots &amp; F^n_n
\end{bmatrix}.
$$ --&gt;
&lt;p&gt;The backward transformation $B$ builds the old basis from the new basis:
$$
\mathbf{e}_i = B^j_i\tilde{\mathbf{e}}_j.
$$&lt;/p&gt;
&lt;!-- or in the matrix-vector equation form:
$$
[\mathbf{e}_1,\cdots,\mathbf{e}_n]=[\tilde{\mathbf{e}}_1,\cdots,\tilde{\mathbf{e}}_n]
\begin{bmatrix}
B^1_1 &amp; \cdots &amp; B^1_n \\\\
\vdots &amp; \ddots &amp; \vdots \\\\
B^n_1 &amp; \cdots &amp; B^n_n
\end{bmatrix}.
$$ --&gt;
&lt;p&gt;Composing the forward and backward transformation should result in the identity transformation:
$$
\mathbf{e}_i = B^j_i F^k_j\mathbf{e}_k
$$
$$
\implies B^j_i F^k_j =\delta^k_i = F^k_j B^j_i.
$$&lt;/p&gt;
&lt;!-- or in the matrix-vector equation form:
$$
FB=
\begin{bmatrix}
F^1_1 &amp; \cdots &amp; F^1_n \\\\
\vdots &amp; \ddots &amp; \vdots \\\\
F^n_1 &amp; \cdots &amp; F^n_n
\end{bmatrix}
\begin{bmatrix}
B^1_1 &amp; \cdots &amp; B^1_n \\\\
\vdots &amp; \ddots &amp; \vdots \\\\
B^n_1 &amp; \cdots &amp; B^n_n
\end{bmatrix}=
\begin{bmatrix}
1 &amp; \cdots &amp; 0 \\\\
\vdots &amp; \ddots &amp; \vdots \\\\
0 &amp; \cdots &amp; 1
\end{bmatrix}=I.
$$ --&gt;
&lt;p&gt;Therefore, the forward and backward transformations are inverses of each other.&lt;/p&gt;
&lt;!-- $$
B=F^{-1}\quad\text{and}\quad F=B^{-1}.
$$ --&gt;
&lt;h3 id=&#34;vectors-and-vector-spaces&#34;&gt;Vectors and Vector Spaces&lt;/h3&gt;
&lt;p&gt;A vector space $(V,S,+,\cdot)$ consists of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$V$: a set of vectors,&lt;/li&gt;
&lt;li&gt;$S$: a set of scalars,&lt;/li&gt;
&lt;li&gt;$+$: a vector addtion rule such that $\mathbf{v}+\mathbf{w}\in V,~\forall\mathbf{v},\mathbf{w}\in V$,&lt;/li&gt;
&lt;li&gt;$\cdot$: a vector scaling rule such that $a\cdot\mathbf{v}\in V,~\forall a\in S,\mathbf{v}\in V$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We usually omit $\cdot$ and just write $a\mathbf{v}$ instead.&lt;/p&gt;
&lt;p&gt;Vectors are a kind of tensor. Vectors are invariant to the coordinate systems, but the components of vectors are not.&lt;/p&gt;
&lt;p&gt;Let $E=[\mathbf{e}_1,\cdots,\mathbf{e}_n]$ be a basis of $(V,S,+,\cdot)$. A vector $\mathbf{v}\in V$ can be represented as a linear combination of the basis vectors:
$$
\mathbf{v}= v^i \mathbf{e}_i,
$$
where the components $v^i\in S$ of $\mathbf{v}$ in the basis $E$ are
$$
\mathbf{v}=
\begin{bmatrix}
v^1 \\
\vdots \\
v^n
\end{bmatrix}_{E}
$$
This tells us that column vectors are the array representations of vectors, which is the array definition of vectors.&lt;/p&gt;
&lt;p&gt;Geometrically, vectors are arrows (directed line segments).&lt;/p&gt;
&lt;h3 id=&#34;vector-transformation&#34;&gt;Vector Transformation&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s represent the vector components of $\mathbf{v}$ in a different basis $\tilde{E}$:
$$
\mathbf{v}=\tilde{v}^j \tilde{\mathbf{e}}_j = \tilde{v}^jF^i_j\mathbf{e}_i = (F^i_j\tilde{v}^j)\mathbf{e}_i.
$$
But in the basis $E$, we have $\mathbf{v}=v^i \mathbf{e}_i$. This implies that
$$
v^i = F^i_j\tilde{v}^j.
$$&lt;/p&gt;
&lt;p&gt;Likewise, we have
$$
\tilde{v}^j \tilde{\mathbf{e}}_j=\mathbf{v}=v^i \mathbf{e}_i =v^i  B^j_i\tilde{\mathbf{e}}_j = (B^j_i v^i) \tilde{\mathbf{e}}_j,
$$
$$
\implies \tilde{v}^j = B^j_i v^i.
$$&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now compare a change of basis to vector transformation:
$$
\tilde{\mathbf{e}}_j = F^i_j\mathbf{e}_i \quad\quad \mathbf{e}_j =  B^i_j\tilde{\mathbf{e}}_i
$$
$$
v^i = F^i_j\tilde{v}^j \quad\quad \tilde{v}^i = B^i_j v^j
$$&lt;/p&gt;
&lt;p&gt;It is interesting to note that vector transformation behaves contrarily to a change of basis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change of basis:
&lt;ul&gt;
&lt;li&gt;Forward transformation changes the old basis into the new basis.&lt;/li&gt;
&lt;li&gt;Backward transformation changes the new basis into the old basis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vector transformation:
&lt;ul&gt;
&lt;li&gt;Forward transformation changes the vector components from the new basis to the old basis.&lt;/li&gt;
&lt;li&gt;Backward transformation changes the vector components from the old basis to the new basis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We say that vector components are contravariant because they contra-vary with a change of basis. As a reminder, we always put the indices of the vector components above the letters. We say that basis vectors are covariant and put the indices of the basis vectors below the letters.&lt;/p&gt;
&lt;h3 id=&#34;covectors-and-dual-vector-spaces&#34;&gt;Covectors and Dual Vector Spaces&lt;/h3&gt;
&lt;p&gt;Covectors (linear forms) are functions $\alpha: V\to S$ that map the vectors in $V$ to the scalars in $S$ such that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\alpha(\mathbf{v}+\mathbf{w})=\alpha(\mathbf{v})+\alpha(\mathbf{w}),~\forall \mathbf{v},\mathbf{w}\in V$.&lt;/li&gt;
&lt;li&gt;$\alpha(n\mathbf{v})=n\alpha(\mathbf{v}),\forall n\in S,\mathbf{v}\in V$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The dual vector space $(V^*,S,+&amp;rsquo;,\cdot&amp;rsquo;)$ of a vector space $(V,S,+,\cdot)$ is a vector space with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the same set $S$ of scalars&lt;/li&gt;
&lt;li&gt;a different set $V^*$ of vectors ($\alpha\in V^*$ are covectors),&lt;/li&gt;
&lt;li&gt;different addition ($+&amp;rsquo;$) and scaling ($\cdot&amp;rsquo;$) rules such that
&lt;ol&gt;
&lt;li&gt;$(n\cdot\alpha)(\mathbf{v})=n\alpha(\mathbf{v}),~\forall n\in S,\alpha\in V^*,\mathbf{v}\in V$.&lt;/li&gt;
&lt;li&gt;$(\alpha+\beta)(\mathbf{v})=\alpha(\mathbf{v})+\beta(\mathbf{v}),~\forall\alpha,\beta\in V^*,\mathbf{v}\in V$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As shown above, we usually just write $+$ and $\cdot$ when we add and scale covectors in $V^*$ but need to remember that the addition and scaling rules in $V^*$ are actually different from those in $V$.&lt;/p&gt;
&lt;h3 id=&#34;dual-basis-and-covector-components&#34;&gt;Dual Basis and Covector Components&lt;/h3&gt;
&lt;p&gt;Covectors are a kind of tensor. Covectors are invariant to the coordinate systems, but the components of covectors are not.&lt;/p&gt;
&lt;p&gt;Take the basis $E=[\mathbf{e}_1,\cdots,\mathbf{e}_n]$ for a vector space $V$. We introduce the (Kronecker) dual basis $\mathcal{E}=[\epsilon^1,\cdots,\epsilon^n]^T$ ($\epsilon^i:V\to S$) for its dual vector space $V^*$:
$$
\epsilon^i(\mathbf{e}_j)=\delta^i_j.
$$&lt;/p&gt;
&lt;p&gt;Each covector $\epsilon^i\in V^*$ in the dual basis outputs the corresponding vector component $v^i$ in the basis $E$:
$$
\epsilon^i(\mathbf{v})=\epsilon^i\left( v^j \mathbf{e}_j \right)=v^j \epsilon^i(\mathbf{e}_j)=v^j\delta^i_j=v^i.
$$&lt;/p&gt;
&lt;p&gt;For any covector $\alpha\in V^*$, we define
$$
\alpha(\mathbf{e}_i)=\alpha_i.
$$&lt;/p&gt;
&lt;p&gt;Now, a covector $\alpha\in V^*$ can be represented as
$$
\alpha(\mathbf{v})=\alpha\left(v^i \mathbf{e}_i \right)=v^i \alpha(\mathbf{e}_i) =  \alpha_i \epsilon^i(\mathbf{v})=(\alpha_i \epsilon^i)(\mathbf{v}).
$$
$$
\implies \alpha = \alpha_i \epsilon^i.
$$&lt;/p&gt;
&lt;p&gt;Therefore, the covector components in the dual basis $\mathcal{E}$ are
$$
\alpha=[\alpha_1, \cdots, \alpha_n]_{\mathcal{E}}.
$$&lt;/p&gt;
&lt;p&gt;This tells us that row vectors are the array representation of covectors, which is the array definition of covectors.&lt;/p&gt;
&lt;!-- $$
\alpha(\mathbf{v})=\alpha\left(\sum_{i=1}^n v^i \mathbf{e}\_i \right)=\sum\_{i=1}^n v^i \alpha(\mathbf{e}_i) = \sum\_{i=1}^n \alpha_i v^i.
$$ --&gt;
&lt;p&gt;Geometrically, a covector is a stack of linearly spaced, straight contour lines. A covector maps a vector into a scalar specified by the number of covector contour lines that the vector covers.&lt;/p&gt;
&lt;h3 id=&#34;change-of-dual-basis-and-covector-transformation&#34;&gt;Change of Dual Basis and Covector Transformation&lt;/h3&gt;
&lt;p&gt;Consider an old dual basis $\mathcal{E}=[\epsilon^1,\cdots,\epsilon^n]^T$ and a new dual basis $\tilde{\mathcal{E}}=[\tilde{\epsilon}^1,\cdots,\tilde{\epsilon}^n]^T$ for $V^*$. Let&amp;rsquo;s build the new dual basis from the old dual basis using a transformation $Q$:
$$
\tilde{\epsilon}^i=Q^i_j\epsilon^j.
$$
Applying forward transformation to $\tilde{\mathbf{e}}_k$ in $\tilde{\epsilon}^i(\tilde{\mathbf{e}}_k)$ gives
$$
\tilde{\epsilon}^i(\tilde{\mathbf{e}}_k)=Q^i_j\epsilon^j(\tilde{\mathbf{e}}_k)= Q^i_j\epsilon^j\left(F^l_k\mathbf{e}_l\right)=Q^i_j \epsilon^j(\mathbf{e}_l) F^l_k=Q^i_j \delta^j_l F^l_k= Q^i_j F^j_k.
$$
But we know that $\tilde{\epsilon}^i(\tilde{\mathbf{e}}_k)=\delta^i_k$ by definition. This implies that
$$
Q^i_j F^j_k=\delta^i_k\quad\implies\quad Q=B.
$$
Therefore, we build the new dual basis from the old dual basis using the backward transformation:
$$
\tilde{\epsilon}^i=B^i_j\epsilon^j.
$$
Likewise, we build the old dual basis from the new dual basis using the forward transformation:
$$
\epsilon^i=F^i_j\tilde{\epsilon}^j.
$$
Let&amp;rsquo;s now compare a change of basis to a change of dual basis:
$$
\tilde{\mathbf{e}}_j = F^i_j\mathbf{e}_i \quad\quad \mathbf{e}_j = B^i_j\tilde{\mathbf{e}}_i
$$
$$
\epsilon^i=F^i_j\tilde{\epsilon}^j \quad\quad \tilde{\epsilon}^i=B^i_j \epsilon^j
$$
It is interesting to note that a change of dual basis behaves contrarily to a change of basis.&lt;/p&gt;
&lt;p&gt;As for covector component transformation, we first represent a covector in two dual bases:
$$
\alpha = \alpha_i\epsilon^i = \tilde{\alpha}_j\tilde{\epsilon}^j.
$$
But changing the dual basis gives
$$
\alpha = \alpha_i\epsilon^i = \alpha_i F^i_j\tilde{\epsilon}^j= (F^i_j\alpha_i)\tilde{\epsilon}^j.
$$
This implies that the forward transformation changes the covector components from the old dual basis to the new dual basis:
$$
\tilde{\alpha}_j = F^i_j\alpha_i.
$$
Likewise, the backward transformation changes the covector components from the new dual basis to the old dual basis:
$$
\alpha_j = B^i_j\tilde{\alpha}_i.
$$
This tells us covector transformation is covariant to a change of basis and contravariant to a change of dual basis.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now summarize what we have learned so far about changes of basis/dual basis and vector/covector transformations:
$$
\tilde{\mathbf{e}}_j = F^i_j\mathbf{e}_i \quad\quad \mathbf{e}_j =  B^i_j\tilde{\mathbf{e}}_i \quad\quad\text{and}\quad\quad v^i =  F^i_j\tilde{v}^j \quad\quad \tilde{v}^i = B^i_j v^j
$$
$$
\epsilon^i= F^i_j\tilde{\epsilon}^j \quad\quad ~ \tilde{\epsilon}^i= B^i_j\epsilon^j \quad\quad\text{and}\quad\quad \tilde{\alpha}_j =  F^i_j\alpha_i \quad\quad \alpha_j =  B^i_j\tilde{\alpha}_i
$$&lt;/p&gt;
&lt;h3 id=&#34;linear-maps&#34;&gt;Linear Maps&lt;/h3&gt;
&lt;p&gt;Linear maps $L:V\to W$ map vectors in $V$ to vectors in $W$ such that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$L(\mathbf{v}+\mathbf{w})=L(\mathbf{v})+L(\mathbf{w})$,&lt;/li&gt;
&lt;li&gt;$L(n\mathbf{v})=nL(\mathbf{v})$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s consider a speical case where $W=V$ from now on. In the array definition, linear maps are matrices that transform column vectors but do not transform basis. We define the transformation of a copy of each basis vector under a linear map $L$ by
$$
L(\mathbf{e}_i)=L^j_i\mathbf{e}_j.
$$
This defines a matrix which contains the linear map components in the basis $E$:
$$
L=\begin{bmatrix}
L^1_1 &amp;amp; \cdots &amp;amp; L^1_n \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\
L^n_1 &amp;amp; \cdots &amp;amp; L^n_n
\end{bmatrix}_{E}.
$$
Let $\mathbf{v}=\sum_{i=1}^n v^i \mathbf{e}_i$ and $\mathbf{w}=\sum_{i=1}^n w^i \mathbf{e}_i$ respectively be the input and output vectors represented in the basis $E$. Then, we have
$$
\mathbf{w}=L(\mathbf{v})=L( v^i \mathbf{e}_i )=v^i L(\mathbf{e}_i)=v^i L^j_i\mathbf{e}_j=(L^j_i v^i ) \mathbf{e}_j,
$$
$$
\implies w^i = L^i_j v^j.
$$
This is essentially the usual matrix-vector multiplication rule:
$$
\begin{bmatrix}
w^1 \\
\vdots \\
w^n
\end{bmatrix}_{E}=
\begin{bmatrix}
L^1_1 &amp;amp; \cdots &amp;amp; L^1_n \\
\vdots &amp;amp; \ddots &amp;amp; \vdots \\
L^n_1 &amp;amp; \cdots &amp;amp; L^n_n
\end{bmatrix}_{E}
\begin{bmatrix}
v^1 \\
\vdots \\
v^n
\end{bmatrix}_{E}.
$$
It is important to note that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The transformed vectors are in the same basis as the input vectors.&lt;/li&gt;
&lt;li&gt;The $i$-th column vector in a matrix is what a copy of the $i$-th basis vector will be transformed into.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geometrically, linear maps are spatial transformations that keep lines parallel, keep lines evenly spaced, and keep the origin unchanged. A linear map can be a combination of vector scaling and rotation but not vector translation.&lt;/p&gt;
&lt;h3 id=&#34;linear-map-transformation&#34;&gt;Linear Map Transformation&lt;/h3&gt;
&lt;p&gt;Linear maps are a kind of tensor. Linear maps are invariant to the coordinate systems, but the components of linear maps are not.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s transform a linear map from an old basis $E$ to a new basis $\tilde{E}$. By definition, we have
$$
L(\tilde{\mathbf{e}}_i)=\tilde{L}^l_i \tilde{\mathbf{e}}_l.
$$
But we also have
$$
L(\tilde{\mathbf{e}}_i)=L( F^j_i \mathbf{e}_j )=F^j_i L(\mathbf{e}_j) = F^j_i L^k_j \mathbf{e}_k = F^j_i L^k_j B^l_k \tilde{\mathbf{e}}_l = ( B^l_k L^k_j F^j_i ) \tilde{\mathbf{e}}_l.
$$
This implies that
$$
\tilde{L}^l_i = B^l_k L^k_j F^j_i.
$$&lt;/p&gt;
&lt;p&gt;Note that multiplying by the identity transformation $I$ does not change a matrix:
$$
(LI)^i_k = L^i_j \delta^j_k = L^i_k.
$$
Then, the backward transformation for the linear map is given by
$$
F^s_l \tilde{L}^l_i B^i_t = F^s_l B^l_k L^k_j F^j_i B^i_t = \delta^s_k L^k_j \delta^j_t = L^s_t.
$$&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s classify the tensors we have learned so far. Note that by vectors, covectors, linear maps and any other tensors (excluding the bases and dual bases), we always mean the components.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(0,1)-tensors (covariant):
&lt;ul&gt;
&lt;li&gt;Basis:
$$
\tilde{\mathbf{e}}_j = F^i_j \mathbf{e}_i \quad\quad \mathbf{e}_j = B^i_j \tilde{\mathbf{e}}_i
$$&lt;/li&gt;
&lt;li&gt;Covectors:
$$
\tilde{\alpha}_j = F^i_j \alpha_i \quad\quad \alpha_j = B^i_j \tilde{\alpha}_i
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(1,0)-tensors (contravariant):
&lt;ul&gt;
&lt;li&gt;Dual basis:
$$
\tilde{\epsilon}^i = B^i_j\epsilon^j \quad\quad \epsilon^i = F^i_j\tilde{\epsilon}^j
$$&lt;/li&gt;
&lt;li&gt;Vectors:
$$
\tilde{v}^i = B^i_j v^j \quad\quad v^i = F^i_j\tilde{v}^j
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(1,1)-tensors (one contravariant dimension, one covariant dimension):
&lt;ul&gt;
&lt;li&gt;Linear maps:
$$
\tilde{L}^i_j = B^i_k L^k_l F^l_j \quad\quad L^i_j = F^i_k \tilde{L}^k_l B^l_j
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bilinear-forms-metric-tensors-and-their-transformations&#34;&gt;Bilinear Forms, Metric Tensors and Their Transformations&lt;/h3&gt;
&lt;p&gt;Metric tensors $g:V\times V\to S$ are speical bilinear forms that define dot products between vectors such that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$ag(\mathbf{v},\mathbf{w})=g(a\mathbf{v},\mathbf{w})=g(\mathbf{v},a\mathbf{w}),~\forall a\in S,~\forall\mathbf{v},\mathbf{w}\in V$.&lt;/li&gt;
&lt;li&gt;$g(\mathbf{v}+\mathbf{u},\mathbf{w})=g(\mathbf{v},\mathbf{w}) + g(\mathbf{u},\mathbf{w}),~\forall\mathbf{v},\mathbf{u},\mathbf{w}\in V$.&lt;/li&gt;
&lt;li&gt;$g(\mathbf{v},\mathbf{w}+\mathbf{t})=g(\mathbf{v},\mathbf{w}) + g(\mathbf{v},\mathbf{t}),~\forall\mathbf{v},\mathbf{w},\mathbf{t}\in V$.&lt;/li&gt;
&lt;li&gt;$g(\mathbf{v},\mathbf{w})=g(\mathbf{w},\mathbf{v}),~\forall\mathbf{v},\mathbf{w}\in V$.&lt;/li&gt;
&lt;li&gt;$g(\mathbf{v},\mathbf{v})\geq 0,~\forall\mathbf{v}\in V$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that 1-3 are rules for general bilinear forms. Rules 4-5 are special for metric tensors, so metric tensors must be symmetric (4) and positive semi-definite (5).&lt;/p&gt;
&lt;p&gt;Metric tensors define the dot product between two vectors $\mathbf{v}$ and $\mathbf{w}$ in a basis $E$:
$$
g(\mathbf{v},\mathbf{w})=g(v^i \mathbf{e}_i,w^j \mathbf{e}_j)=v^i w^j g(\mathbf{e}_i,\mathbf{e}_j).
$$
The array representation of a metric tensor $g$ in the basis $E$ is defined as
$$
g_{ij}=g(\mathbf{e}_i,\mathbf{e}_j),
$$
Therefore, the dot product in the basis $E$ becomes
$$
g(\mathbf{v},\mathbf{w})=v^i w^j g_{ij}.
% \begin{bmatrix}
% v^1 &amp;amp; \cdots &amp;amp; v^n
% \end{bmatrix}_{E}
% \begin{bmatrix}
% g_{11} &amp;amp; \cdots &amp;amp; g_{1n} \\
% \vdots &amp;amp; \ddots &amp;amp; \vdots \\
% g_{n1} &amp;amp; \cdots &amp;amp; g_{nn}
% \end{bmatrix}_{E}
% \begin{bmatrix}
% w^1 \\
% \vdots \\
% w^n
% \end{bmatrix}_{E}.
$$&lt;/p&gt;
&lt;p&gt;Using dot products, we respectively define the norm $\lVert\cdot\rVert$ of a vector and the angle $\left&amp;lt;\cdot,\cdot\right&amp;gt;$ between two vectors as
$$
\lVert\mathbf{v}\rVert^2 = g(\mathbf{v},\mathbf{v})=v^i v^j g_{ij}\geq 0,
$$
$$
\cos\left&amp;lt;\mathbf{v},\mathbf{w}\right&amp;gt;=\frac{g(\mathbf{v},\mathbf{w})}{\lVert\mathbf{v}\rVert\lVert\mathbf{w}\rVert}=\frac{v^i w^j g_{ij}}{\sqrt{v^i v^j g_{ij}}\sqrt{w^i w^j g_{ij}}}.
$$&lt;/p&gt;
&lt;p&gt;For an orthonormal basis $E$, the metric tensor is given by the identity matrix $g_{ij}=g(\mathbf{e}_i,\mathbf{e}_j)=\delta_{ij}$. This gives us the usual dot product $g(\mathbf{v},\mathbf{w})=v^i w^i$ and the Pythagorean theorem $\lVert\mathbf{v}\rVert^2=v^iv^i$.&lt;/p&gt;
&lt;p&gt;Metric tensors are invariant to the coordinate systems, but the components of metric tensors are not. Let&amp;rsquo;s now a transform metric tensor (or more generally, a bilinear form) from an old basis $E$ to a new basis $\tilde{E}$:
$$
\tilde{g}_{ij}=g(\tilde{\mathbf{e}}_i,\tilde{\mathbf{e}}_j)=g(F^k_i \mathbf{e}_k,F^l_j \mathbf{e}_l)=F^k_iF^l_j g(\mathbf{e}_k,\mathbf{e}_l)=F^k_iF^l_jg_{kl}.
$$
Likewise, the metric tensor transformation from $\tilde{E}$ to $E$ is given by the inverse of the above transformation
$$
g_{kl}=g(\mathbf{e}_k,\mathbf{e}_l)=g(B^i_k \tilde{\mathbf{e}}_i,B^j_l \tilde{\mathbf{e}}_j)=B^i_k B^j_l g(\tilde{\mathbf{e}}_i,\tilde{\mathbf{e}}_j)=B^i_k B^j_l \tilde{g}_{ij}.
$$
Metric tensors (and general bilinear forms) are (0,2)-tensors since both dimensions in a metric tensor are covariant (to a change of basis).&lt;/p&gt;
&lt;p&gt;We can also show that the results of dot products are identical in different bases:
$$
g(\mathbf{v},\mathbf{w})=v^i w^j g_{ij}=(F^i_k\tilde{v}^k)(F^j_l\tilde{v}^l) B^s_i B^t_j \tilde{g}_{st}=(B^s_i F^i_k)(B^t_jF^j_l)\tilde{v}^k\tilde{v}^l\tilde{g}_{st} = \delta^s_k \delta^t_l \tilde{v}^k\tilde{v}^l\tilde{g}_{st}=\tilde{v}^s\tilde{v}^t\tilde{g}_{st}.
$$&lt;/p&gt;
&lt;h3 id=&#34;general-linear-forms-and-tensors&#34;&gt;General Linear Forms and Tensors&lt;/h3&gt;
&lt;p&gt;In general, we define an $n$-(linear) form to be a linear function $V\times V\times \cdots \times V=V^n\to S$, which is a (0,$n$)-tensor or a rank-$n$ covector. Covectors are linear forms or 1-linear forms. Bilinear forms are 2-linear forms.&lt;/p&gt;
&lt;p&gt;A general ($m$,$n$)-tensor $T$ is a tensor with $m$ contravariant dimensions and $n$ covariant dimensions. General tensor transformations are defined as
$$
\tilde{T}^{abc\cdots}_{xyz\cdots}=(B^a_i B^b_j B^c_k\cdots ) T^{ijk\cdots}_{rst\cdots} (F^r_x F^s_y F^t_z\cdots),
$$
$$
T^{ijk\cdots}_{rst\cdots}=(F^i_a F^j_b F^k_c\cdots ) \tilde{T}^{abc\cdots}_{xyz\cdots} (B^x_r B^y_s B^z_t\cdots).
$$
We will derive this transformation rule using tensor products later.&lt;/p&gt;
&lt;h3 id=&#34;examples-of-tensor-products&#34;&gt;Examples of Tensor Products&lt;/h3&gt;
&lt;p&gt;In general, tensors can be constructed by combining vectors and covectors using tensor product. We first give a few examples of redefining tensors that we have learned using tensor products below.&lt;/p&gt;
&lt;p&gt;Linear maps are tensor products of vector-covector pairs:
$$
L=L^i_j\mathbf{e}_i\otimes\epsilon^j.
$$
We can verify the definition of linear maps:
$$
\mathbf{w}=L(\mathbf{v})=L^i_j\mathbf{e}_i\otimes\epsilon^j(v^k\mathbf{e}_k)=L^i_j v^k \mathbf{e}_i\otimes\epsilon^j(\mathbf{e}_k)=L^i_j v^k \mathbf{e}_i \delta^j_k = L^i_j v^j \mathbf{e}_i,
$$
and the transformation of linear maps:
$$
L=L^k_l\mathbf{e}_k\otimes\epsilon^l=L^k_l(B^i_k\tilde{\mathbf{e}}_i)\otimes(F^l_j\tilde{\epsilon}^j)= (B^i_k L^k_l F^l_j) \tilde{\mathbf{e}}_i \otimes \tilde{\epsilon}^j=\tilde{L}^i_j \tilde{\mathbf{e}}_i \otimes \tilde{\epsilon}^j
$$
$$
\implies \tilde{L}^i_j = B^i_k L^k_l F^l_j.
$$&lt;/p&gt;
&lt;p&gt;Bilinear forms (including metric tensors) are tensor products of covector-covector pairs:
$$
\mathcal{B}=\mathcal{B}_{ij}\epsilon^i\otimes\epsilon^j.
$$
We can verify the definition of bilinear forms:
$$
\begin{aligned}
s
&amp;amp;= \mathcal{B}(\mathbf{v},\mathbf{w})=\mathcal{B}_{ij}(\epsilon^i\otimes\epsilon^j)(\mathbf{v},\mathbf{w})=\mathcal{B}_{ij}\epsilon^i(\mathbf{v})\otimes\epsilon^j(\mathbf{w})=\mathcal{B}_{ij}\epsilon^i(v^k\mathbf{e}_k)\otimes\epsilon^j(w^l\mathbf{e}_l) \\
&amp;amp;=\mathcal{B}_{ij}v^k w^l\epsilon^i(\mathbf{e}_k)\otimes\epsilon^j(\mathbf{e}_l)=\mathcal{B}_{ij}v^k w^l \delta^i_k \delta^j_l=\mathcal{B}_{ij}v^i w^j,
\end{aligned}
$$
and the transformation of bilinear forms:
$$
\mathcal{B}=\mathcal{B}_{kl}\epsilon^k\otimes\epsilon^l=\mathcal{B}_{kl}(F^k_i\tilde{\epsilon}^i)\otimes(F^l_j\tilde{\epsilon}^j)=F^k_i F^l_j\mathcal{B}_{kl}\tilde{\epsilon}^i\otimes\tilde{\epsilon}^j=\tilde{\mathcal{B}}_{ij}\tilde{\epsilon}^i\otimes\tilde{\epsilon}^j
$$
$$
\implies \tilde{\mathcal{B}}_{ij} = F^k_i F^l_j\mathcal{B}_{kl}.
$$&lt;/p&gt;
&lt;h3 id=&#34;general-tensor-products-and-kronecker-products&#34;&gt;General Tensor Products and Kronecker Products&lt;/h3&gt;
&lt;p&gt;A general ($m$,$n$)-tensor can be defined by combining $m$ vectors $\mathbf{e}_i,\mathbf{e}_j,\mathbf{e}_k,\cdots$ and $n$ covectors $\epsilon^r,\epsilon^s,\epsilon^t,\cdots$ using tensor products:
$$
T = T^{ijk\cdots}_{rst\cdots}(\mathbf{e}_i\otimes\mathbf{e}_j\otimes\mathbf{e}_k\otimes\cdots)\otimes (\epsilon^r\otimes\epsilon^s\otimes\epsilon^t\otimes\cdots).
$$
Applying changes of bases and dual bases, we obtain
$$
\begin{aligned}
T &amp;amp;= T^{ijk\cdots}_{rst\cdots}(B^a_i\tilde{\mathbf{e}}_a\otimes B^b_j\tilde{\mathbf{e}}_b\otimes B^c_k\tilde{\mathbf{e}}_c\otimes\cdots)\otimes (F^r_x\tilde{\epsilon}^x\otimes F^s_y\tilde{\epsilon}^y\otimes F^t_z \tilde{\epsilon}^z\otimes\cdots) \\
&amp;amp;= (B^a_i B^b_j B^c_k\cdots) T^{ijk\cdots}_{rst\cdots} (F^r_x F^s_y F^t_z \cdots) (\tilde{\mathbf{e}}_a\otimes \tilde{\mathbf{e}}_b\otimes \tilde{\mathbf{e}}_c\otimes\cdots)\otimes (\tilde{\epsilon}^x\otimes \tilde{\epsilon}^y\otimes \tilde{\epsilon}^z\otimes\cdots).
\end{aligned}
$$
But the definition of the tensor $T$ in the new bases and dual bases is
$$
T = \tilde{T}^{abc\cdots}_{xyz\cdots}(\tilde{\mathbf{e}}_a\otimes \tilde{\mathbf{e}}_b\otimes \tilde{\mathbf{e}}_c\otimes\cdots)\otimes (\tilde{\epsilon}^x\otimes \tilde{\epsilon}^y\otimes \tilde{\epsilon}^z\otimes\cdots).
$$
This gives us the general tensor transformation rule:
$$
\tilde{T}^{abc\cdots}_{xyz\cdots}=(B^a_i B^b_j B^c_k\cdots ) T^{ijk\cdots}_{rst\cdots} (F^r_x F^s_y F^t_z\cdots).
$$&lt;/p&gt;
&lt;p&gt;When we apply an ($m$,$n$)-tensor tensor $T$ to an ($n$,0)-tensor (or a rank-$n$ vector) $D$, we will obtain an ($m$,0)-tensor (or a rank-$m$ vector) $T(D)$. This is a generalization of applying a (rank-1) covector (i.e., a (1,0)-tensor) to a $rank-1$ vector (i.e., a (0,1)-tensor) resulting in a scalar (i.e., a (0,0)-tensor).&lt;/p&gt;
&lt;p&gt;Specifically, suppose that
$$
D = D^{opq\cdots}(\mathbf{e}_o\otimes\mathbf{e}_p\otimes\mathbf{e}_q\otimes\cdots).
$$
Then, we have
$$
T(D)=T^{ijk\cdots}_{rst\cdots}(\mathbf{e}_i\otimes\mathbf{e}_j\otimes\mathbf{e}_k\otimes\cdots)\otimes (\epsilon^r\otimes\epsilon^s\otimes\epsilon^t\otimes\cdots)(D^{opq\cdots}\mathbf{e}_o\otimes\mathbf{e}_p\otimes\mathbf{e}_q\otimes\cdots).
$$
Note that there are multiple ways in which we can associate each covector with a vector in $(T_{rst\cdots}\epsilon^r\otimes\epsilon^s\otimes\epsilon^t\otimes\cdots)(D^{opq\cdots}\mathbf{e}_o\otimes\mathbf{e}_p\otimes\mathbf{e}_q\otimes\cdots)$. To avoid ambiguity, we should always clearly specify such association using Einstein&amp;rsquo;s notation. That is, whether it means $T(D)=T^{ijk\cdots}_{rst\cdots} D^{rst\cdots}$ or $T(D)=T^{ijk\cdots}_{rst\cdots} D^{rts\cdots}$ or anything else.&lt;/p&gt;
&lt;p&gt;Note that a tensor is a multilinear map, which is linear when all inputs except one are held constant:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$T(x_1,\cdots,nx_i,\cdots,x_n)=nT(x_1,\cdots,x_i,\cdots,x_n),~\forall i$,&lt;/li&gt;
&lt;li&gt;$T(x_1,\cdots,x_i+y_i,\cdots,x_n)=T(x_1,\cdots,x_i,\cdots,x_n)+T(x_1,\cdots,y_i,\cdots,x_n),~\forall i$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kronecker products are tensor products expressed in the array representation of tensors. For examples, matrices are Kronecker products of (column vector, row vector) pairs, and metric tensors are Kronecker products of (row vector, row vector) pairs.&lt;/p&gt;
&lt;h3 id=&#34;tensor-product-spaces&#34;&gt;Tensor Product Spaces&lt;/h3&gt;
&lt;p&gt;Let $n\in S$ be a scalar, $\mathbf{v},\mathbf{u}\in V$ be vectors, and $\alpha,\beta\in V^*$ be covectors. Tensor products satisfy the following rules&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$n(\mathbf{v}\otimes\alpha)=(n\mathbf{v})\otimes\alpha=\mathbf{v}\otimes(n\alpha)$,&lt;/li&gt;
&lt;li&gt;$\mathbf{v}\otimes\alpha+\mathbf{v}\otimes\beta=\mathbf{v}\otimes(\alpha+\beta)$,&lt;/li&gt;
&lt;li&gt;$\mathbf{v}\otimes\alpha+\mathbf{u}\otimes\alpha=(\mathbf{v}+\mathbf{u})\otimes\alpha$.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can form tensor product spaces $V\otimes V$, $V\times V^*$, $V^*\times V$, and $V^*\times V^*$ using tensor products, and we can continue forming larger tensor products such as $V\otimes V^* \otimes V \otimes \cdots$ and so forth. A tensor space associated with a tensor $T$ contains elements obtained by any number of summations with $T$ in any order.&lt;/p&gt;
&lt;p&gt;For example, consider a tensor space $V^* \otimes V \otimes V^* \otimes V^*$ associated with the tensor $T^{~j}_{i~kl}\epsilon^i\mathbf{e}_j\epsilon^k\epsilon^l$. Below are some example elements in this tensor space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$T^{~j}_{i~kl} v^i \alpha_j w^k u^l\quad V \times V^* \times V \times V \to S$,&lt;/li&gt;
&lt;li&gt;$T^{~j}_{i~kl} U^{ikl}\beta_j\quad (V \otimes V \otimes V)\times V^* \to S$,&lt;/li&gt;
&lt;li&gt;$T^{~j}_{i~kl} \alpha_j D^{kl}\quad V^* \times (V \otimes V) \to V^*$,&lt;/li&gt;
&lt;li&gt;$T^{~j}_{i~kl} L^i_j \quad (V \otimes V^*)\to (V^* \otimes V^*)$,&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;musical-isomorphism&#34;&gt;Musical Isomorphism&lt;/h3&gt;
&lt;p&gt;We would like to find a meaningful partner covector $\nu=v_i\epsilon^i\in V^*$ for each vector $\mathbf{v}=v^i\mathbf{e}_i\in V$. It turns out that one such partnership is called musical isomorphism, which is defined using the metric tensor $g\in V^*\otimes V^*$ (i.e., dot product).&lt;/p&gt;
&lt;p&gt;Musical isomorphism defines the partner of the vector $\mathbf{v}\in V$ as the linear function $\nu:V\to S$ such that
$$
\nu=g(\cdot,\mathbf{v})=g_{ik}\epsilon^i\otimes\epsilon^k(v^j\mathbf{e}_j)=g_{ik}v^j\epsilon^i\otimes\epsilon^k(\mathbf{e}_j)=g_{ik} v^j \epsilon^i\delta^k_j=(g_{ij}v^j)\epsilon^i.
$$
But we have $\nu=v_i\epsilon^i$ by definition. This defines the flat operation which lowers the index of the components $v^j$ of the vector $\mathbf{v}$ by
$$
v_i=g_{ij}v^j.
$$
Therefore, the partner covector $\nu$ for the vector $\mathbf{v}$ is given by
$$
\nu=v_i\epsilon^i=g_{ij}v^j\epsilon^i.
$$&lt;/p&gt;
&lt;p&gt;Another way to think about the flat operation for lowering vector component indices $v^i$ is to consider the dot product between the corresponding basis vector $\mathbf{e}_i$ and the vector $\mathbf{v}$:
$$
v_i=g(\mathbf{e}_i,\mathbf{v})=g(\mathbf{e}_i,v^j\mathbf{e}_j)=v^j g(\mathbf{e}_i,\mathbf{e}_j)=g_{ij}v^j.
$$
Geometrically, this tells us that $v_i$ is the projection of the vector $\mathbf{v}$ onto the basis vector $\mathbf{e}_i$. Note that $v^i\not=v_i$ in general. The only exception is in the orthonormal basis where we have
$$
v_i=g_{ij}v^j=\delta_{ij}v^j=v^i.
$$&lt;/p&gt;
&lt;p&gt;This is a meaningful partnership because it holds in any basis by definition:
$$
\tilde{v}_i=\tilde{g}_{ij}\tilde{v}^j \quad\text{and}\quad\nu=\tilde{v}_i\tilde{\epsilon}^i=\tilde{g}_{ij}\tilde{v}^j\tilde{\epsilon}^i.
$$&lt;/p&gt;
&lt;p&gt;We can define the inverse of the metric tensor as $h^{ki}\in V\otimes V$ such that composing $g$ and $h$ results in the identity:
$$
h^{ij}g_{jk}=\delta^i_k.
$$
Then, the sharp operation which raises the index of the components $v_j$ of the covector $\nu$ (i.e., the inverse of the flat operation) can be derived as follows:
$$
h^{ij}v_j=h^{ij}g_{jk}v^k=\delta^i_k v^k=v^i,
$$
$$
\mathbf{v}=v^i\mathbf{e}_i=h^{ij}v_j\mathbf{e}_i.
$$
Likewise, this holds in any basis by definition:
$$
\tilde{v}^i=\tilde{h}^{ij}\tilde{v}_j,
$$
$$
\mathbf{v}=\tilde{v}^i\tilde{\mathbf{e}}_i=\tilde{h}^{ij}\tilde{v}_j\tilde{\mathbf{e}}_i.
$$&lt;/p&gt;
&lt;p&gt;The flat and sharp operations for lowering and raising indices can be applied to tensors of any rank in general. For example, consider the tensor $T=T^i_{jk}\mathbf{e}_i\otimes\epsilon^j\otimes\epsilon^k\in V\otimes V^* \otimes V^*$. We can raise the index $j$ by $T^i_{jk}h^{jl}=T^{il}_k$, which results in a new tensor $T&amp;rsquo;=T^{il}_k \mathbf{e}_i\otimes\mathbf{e}_l\otimes\epsilon^k\in V\otimes V \otimes V^*$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bi-level Optimization</title>
      <link>https://wenlin-chen.github.io/post/bilevel_optimization/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://wenlin-chen.github.io/post/bilevel_optimization/</guid>
      <description>&lt;h2 id=&#34;bi-level-optimization&#34;&gt;Bi-level Optimization&lt;/h2&gt;
&lt;h3 id=&#34;problem-setting&#34;&gt;Problem Setting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Consider the following bi-level optimization objective:
$$
\begin{aligned}
x^*&amp;amp;=\underset{x}{\operatorname{argmin}}~f(x,y^*(x))\quad\text{(outer optimization)}, \\
s.t.\quad y^*(x)&amp;amp;=\underset{y}{\operatorname{argmin}}~g(x,y)\quad\text{(inner optimization)}.
\end{aligned}
$$&lt;/li&gt;
&lt;li&gt;This bi-level optimization objective can be understood by separately considering the two objectives.
&lt;ul&gt;
&lt;li&gt;Inner optimization: for each given value of $x$, the best response function $y^*(x)$ is defined as the value $y$ that minimizes the inner objective $g(x,y)$.&lt;/li&gt;
&lt;li&gt;Outer optimization: given the best response function $y^{*}(x)$, the optimum $x^*$ is defined as the value $x$ that minimizes the outer objective $f(x,y^{*}(x))$.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This results in a nested optimization procedure as evaluating the outer objective $f(x,y^*(x))$ at each value of $x$ requires solving an inner optimization problem to obtain the best response function $y^{*}(x)$ at that value of $x$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gradient-based-optimization&#34;&gt;Gradient-based Optimization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The outer objective $f(x,y^{*}(x))$ can be seen as an implicit function of $x$ alone.&lt;/li&gt;
&lt;li&gt;We can compute the hyper-gradient (i.e., total derivative) of $f(x,y^{*}(x))$ with respect to $x$:
$$\frac{d f(x,y^{*}(x))}{d x}=\frac{\partial f(x,y^{*}(x))}{\partial x}+\frac{\partial f(x,y^{*}(x))}{\partial y^*(x)}\frac{\partial y^*(x)}{\partial x}.$$
&lt;ul&gt;
&lt;li&gt;The two gradients $\frac{\partial f(x,y^{*}(x))}{\partial x}$ and $\frac{\partial f(x,y^{*}(x))}{\partial y^*(x)}$ can be easily calculated by automatic differentiation.&lt;/li&gt;
&lt;li&gt;Calculating the Jacobian $\frac{\partial y^*(x)}{\partial x}$ is tricky, since the best response function $y^*(x)$ itself is defined by an argmin function in the inner optimization.&lt;/li&gt;
&lt;li&gt;If the inner optimization is also solved by gradient-based optimzation, then calculating the Jacobian $\frac{\partial y^*(x)}{\partial x}$ naively by automatic differentiation will require tracking the gradients through many iterations of the inner optimization, which is computationally intractable in practice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implicit-function-theorem-ift&#34;&gt;Implicit Function Theorem (IFT)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An important observation is that $y^*(x)$ is a critical point (i.e., minimum) of $g(x,y)$ for each given $x$.&lt;/li&gt;
&lt;li&gt;This enables us to employ Implicit Function Theorem (IFT) to calculate the Jacobian $\frac{\partial y^*(x)}{\partial x}$ for any $x&amp;rsquo;$:
$$\left.\frac{\partial y^*(x)}{\partial x}\right|_{x=x&amp;rsquo;}=-\left.\left(\frac{\partial^2 g(x,y)}{\partial y \partial y^T}\right)^{-1}\frac{\partial^2 g(x,y)}{\partial y \partial x^T}\right|_{x=x&amp;rsquo;,y=y^*(x&amp;rsquo;)}.$$
&lt;ul&gt;
&lt;li&gt;The mixed partial derivatives $\frac{\partial^2 g(x,y)}{\partial y \partial x^T}$ can be easily calculated by automatic differentiation.&lt;/li&gt;
&lt;li&gt;The inverse Hessian $\left(\frac{\partial^2 g(x,y)}{\partial y \partial y^T}\right)^{-1}$ may be calculated exactly by automatic differentiation or approximated by Neumann approximation or conjugate gradient, depending on the size of the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;applications&#34;&gt;Applications&lt;/h2&gt;
&lt;h3 id=&#34;hyperparmaeter-optimization&#34;&gt;Hyperparmaeter Optimization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Let $x$ be the hyperparameters and $y$ be the parameters of a machine learning model.&lt;/li&gt;
&lt;li&gt;Let $f$ be the validation loss function and $g$ be the training loss function.&lt;/li&gt;
&lt;li&gt;Inner optimization corresponds to finding the optimum model parameter $y^*(x)$ by minimizing the training loss $g(x,y)$ given current hyperparameters $x$.&lt;/li&gt;
&lt;li&gt;Outer optimization corresponds to finding the optimum hyperparameters $x^*$ that minimizes the validation loss $f(x,y^{*}(x))$ given the optimum model parameters $y^{*}(x)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;meta-learning&#34;&gt;Meta-learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Let $x$ be the meta-learned parameters shared across all tasks and $y$ be the task-specific parameters.&lt;/li&gt;
&lt;li&gt;Let $f$ be the validation loss function and $g$ be the training loss function.&lt;/li&gt;
&lt;li&gt;Inner optimization corresponds to finding the optimum task-specific parameters $y^*(x)$ for each task by minimizing the training loss $g(x,y)$ given current meta-learned parameters $x$ shared across all tasks.&lt;/li&gt;
&lt;li&gt;Outer optimization corresponds to finding the optimum meta-learned parameters $x^*$ that minimizes the expected validation loss $f(x,y^{*}(x))$ across tasks given the optimum task-specific parameters $y^{*}(x)$.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
