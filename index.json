[{"authors":null,"categories":null,"content":"I\u0026rsquo;m a PhD student in Machine Learning at University of Cambridge (Machine Learning Group, Computational and Biological Learning Lab) and Max Planck Institute for Intelligent Systems (Department of Empirical Inference), under the Cambridge-Tübingen PhD Fellowship. My supervisors are José Miguel Hernández-Lobato, Bernhard Schölkopf, and Hong Ge.\nI\u0026rsquo;m keen on basic research in machine learning and its scientific applications. My research interest lies at the intersection of deep learning and probabilistic methods. I\u0026rsquo;m exicted about developing efficient machine learning methods for robust prediction and realistic data generation.\n","date":1723334400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1723334400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I\u0026rsquo;m a PhD student in Machine Learning at University of Cambridge (Machine Learning Group, Computational and Biological Learning Lab) and Max Planck Institute for Intelligent Systems (Department of Empirical Inference), under the Cambridge-Tübingen PhD Fellowship.","tags":null,"title":"Wenlin Chen","type":"authors"},{"authors":["Wen Wu","Wenlin Chen","Chao Zhang","Philip C. Woodland"],"categories":null,"content":"","date":1723334400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1723334400,"objectID":"3d127668f789f626cd8694802abe15f4","permalink":"https://wenlin-chen.github.io/publication/wu2024modelling/","publishdate":"2023-09-30T00:00:00Z","relpermalink":"/publication/wu2024modelling/","section":"publication","summary":"Human annotator simulation (HAS) serves as a cost-effective substitute for human evaluation tasks such as data annotation and system assessment. It is important to incorporate the variability present in human evaluation into HAS, since it helps capture diverse subjective interpretations and mitigate potential biases and over-representation. This work introduces a novel framework for modelling variability in HAS. Conditional softmax flow (S-CNF) is proposed to model the distribution of subjective human annotations, which leverages diverse human annotations via meta-learning. This enables the efficient generation of annotations that exhibit human variability for unlabelled input. In addition, a wide range of evaluation metrics are adopted to assess the capability and efficiency of HAS systems in predicting the aggregated behaviours of human annotators, matching the distribution of human annotations, and simulating the inter-annotator disagreements. Results demonstrate that the proposed method achieves state-of-the-art performance on two real-world human evaluation tasks: emotion recognition and toxic speech detection.","tags":[],"title":"Modelling Variability in Human Annotator Simulation","type":"publication"},{"authors":["Wenlin Chen","Hong Ge"],"categories":null,"content":"","date":1721952000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1721952000,"objectID":"0b50df3c4869c26c17971836fdd61544","permalink":"https://wenlin-chen.github.io/publication/chen2024relu/","publishdate":"2023-05-25T00:00:00Z","relpermalink":"/publication/chen2024relu/","section":"publication","summary":"We introduce a novel approach for analyzing the training dynamics of ReLU networks by examining the characteristic activation boundaries of individual ReLU neurons. Our proposed analysis reveals a critical instability in common neural network parameterizations and normalizations during stochastic optimization, which impedes fast convergence and hurts generalization performance. Addressing this, we propose Geometric Parameterization (GmP), a novel neural network parameterization technique that effectively separates the radial and angular components of weights in the hyperspherical coordinate system. We show theoretically that GmP resolves the aforementioned instability issue. We report empirical results on various models and benchmarks to verify GmP's theoretical advantages of optimization stability, convergence speed and generalization performance.","tags":[],"title":"ReLU Characteristic Activation Analysis","type":"publication"},{"authors":["Wenlin Chen","Mingtian Zhang","Brooks Paige","José Miguel Hernández-Lobato","David Barber"],"categories":null,"content":"","date":1721520000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1721520000,"objectID":"ce0f1bccc5bc8fef905bf5da977085b4","permalink":"https://wenlin-chen.github.io/publication/chen2024diffusive/","publishdate":"2024-02-04T00:00:00Z","relpermalink":"/publication/chen2024diffusive/","section":"publication","summary":"The inadequate mixing of conventional Markov Chain Monte Carlo (MCMC) methods for multi-modal distributions presents a significant challenge in practical applications such as Bayesian inference and molecular dynamics. Addressing this, we propose Diffusive Gibbs Sampling (DiGS), an innovative family of sampling methods designed for effective sampling from distributions characterized by distant and disconnected modes. DiGS integrates recent developments in diffusion models, leveraging Gaussian convolution to create an auxiliary noisy distribution that bridges isolated modes in the original space and applying Gibbs sampling to alternately draw samples from both spaces. A novel Metropolis-within-Gibbs scheme is proposed to enhance mixing in the denoising sampling step. DiGS exhibits a better mixing property for sampling multi-modal distributions than state-of-the-art methods such as parallel tempering, attaining substantially improved performance across various tasks, including mixtures of Gaussians, Bayesian neural networks and molecular dynamics. ","tags":[],"title":"Diffusive Gibbs Sampling","type":"publication"},{"authors":null,"categories":null,"content":"Latent Variable Models Introduction Observed data: $x\\in\\mathcal{X}\\subseteq\\mathbb{R}^n$. Latent variable: $z\\in\\mathbb{R}^d$ ($d\\leq n$). The joint distribution is factorized as the product of likelihood and prior: $$p_{\\theta}(x,z)=p_{\\theta}(x|z)p(z).$$ The likelihood (or decoder/generation model) is a Gaussian distribution with mean parameterized by a neural network: $$p_{\\theta}(x|z)=\\mathcal{N}(x|\\mu_{\\theta}(z),\\sigma^2I).$$ The prior is often chosen to be a simple distribution like standard Gaussian: $$p(z)=\\mathcal{N}(z|0,I).$$ The marginal likelihood (or model evidence) is usually used for model selection: $$p_{\\theta}(x)=\\int p_{\\theta}(x|z)p(z) dz.$$ Maximum marginal likelihood learning $\\max_{\\theta}\\log p_{\\theta}(x)$ in intractable due to the intractable integral. The posterior is given by Bayes\u0026rsquo; rule: $$p_{\\theta}(z|x)=\\frac{p_{\\theta}(x|z)p(z)}{p_{\\theta}(x)}=\\frac{p_{\\theta}(x|z)p(z)}{\\int p_{\\theta}(x|z)p(z) dz}.$$ The posterior is also intractable due to the intractability of the marginal likelihood. Variational Autoencoders (VAEs) VAEs introduce an amortized mean-field Gaussian variational posterior (or encoder/inference model) with mean and diagnoal variance parameterized by neural networks: $$q_{\\phi}(z|x)=\\mathcal{N}(z|\\tilde{\\mu}_{\\phi}(x),\\text{diag}(\\tilde{\\sigma}_{\\phi}(x)^2))\\approx p_{\\theta}(z|x).$$ The parameters of both the generation and inference models are jointly learned by maximizing a tractable evidence lower bound (ELBO) of the log marginal likelihood: $$\\log p_{\\theta}(x)\\geq\\mathbb{E}_{q_{\\phi}(z|x)}\\left[\\log\\frac{p_{\\theta}(x|z)p(z)}{q_{\\phi}(z|x)}\\right]=\\mathbb{E}_{q_{\\phi}(z|x)}\\left[\\log p_{\\theta}(x|z)\\right]-\\text{KL}(q_{\\phi}(z|x)||p(z))=\\mathcal{F}(\\theta,\\phi).$$ The first term $\\mathbb{E}_{q_{\\phi}(z|x)}\\left[\\log p_{\\theta}(x|z)\\right]$ controls the reconstruction error. The second term $\\text{KL}(q_{\\phi}(z|x)||p(z))$ regularizes the approximate posterior to be close to the prior. In order to backpropagate through samples $z\\sim q_{\\phi}(z|x)$, we employ the reparameterization trick: $$z=\\tilde{\\mu}_{\\phi}(x)+\\tilde{\\sigma}_{\\phi}(x)\\odot \\epsilon,\\quad \\epsilon\\sim N(0,I).$$ It is quite hard to train both generation and inference models well in practice due to difficulties in balancing the two terms above during optimization (e.g., the variational posterior can easily collapse to the prior due to variational overpruning). The gap between the ELBO and log marginal likelihood is given by: $$\\log p_{\\theta}(x)-\\mathcal{F}(\\theta,\\phi)=\\text{KL}(q_{\\phi}(z|x)||p_{\\theta}(z|x))\\geq 0.$$ Maximizing the ELBO is equivalent to minimizing the KL divergence between the approximate and true posteriors. The ELBO attains equality when the approximate posterior is exactly the same as the true posterior: $$\\log p_{\\theta}(x)=\\mathcal{F}(\\theta,\\phi)\\iff\\text{KL}(q_{\\phi}(z|x)||p_{\\theta}(z|x))=0\\iff q_{\\phi}(z|x)=p_{\\theta}(z|x).$$ However, the mean-field variational poterior $q_{\\phi}(z|x)$ is uni-modal and the reverse KL divergence is known to be mode-seeking instead of mass convering. This means that $q_{\\phi}(z|x)$ can only fit to one of the modes in the true posterior $p_{\\theta}(z|x)$, which limits the expressivity of VAEs and makes it hard for the aggregated poseterior $q_{\\phi}(z)=\\int q_{\\phi}(z|x)p_{\\text{data}}(x)dx$ to be close to the prior $p(z)=\\mathcal{N}(0,I)$. Diffusion and Hierarchical Latent Variable Models Introduction We slightly change the notation following the convention of hierarchical latent variable models. Observed data: $x_0=x\\in\\mathcal{X}\\subseteq\\mathbb{R}^n$. We employ a sequence of latent variables $x_1,\\cdots,x_T\\in\\mathbb{R}^d$ ($d\\leq n$) to capture data representation at different levels. The results in a new marginal likelihood: $$p_{\\theta}(x_0)=\\int p(x_T)\\prod_{t=1}^T p_{\\theta}(x_{t-1}|x_t)dx_{1:T}.$$ The prior over the last latent variable is a Standard Gaussian: $$p(x_T)=\\mathcal{N}(x_T|0,I).$$ The likelihoods (or decoders/generation models) are Gaussians with mean parameterized by a time-dependent neural network: $$p_{\\theta}(x_{t-1}|x_t)=\\mathcal{N}(x_{t-1}|\\mu_{\\theta}(x_t,t),\\sigma_t^2 I).$$ The posterior is intractable as before: $$p_{\\theta}(x_{1:T}|x_0)=\\frac{p(x_T)\\prod_{t=1}^T p_{\\theta}(x_{t-1}|x_t)}{p_{\\theta}(x_0)}.$$ Hierarchical Variational Autoencoders (HVAEs) HVAEs approximate the intractable posterior with an amortized Gaussian variational posterior (or encoder/inference model): $$q_{\\phi}(x_{1:T}|x_0)\\approx p_{\\theta}(x_{1:T}|x_0).$$ There are different design choices for the factorization of the inference model. Bottom-up factorization: $$q_{\\phi}(x_{1:T}|x_0)=\\prod_{t=1}^T q_{\\phi}(x_t|x_{t-1}).$$ Top-down factorization: $$q_{\\phi}(x_{1:T}|x_0)=q_{\\phi}(x_T|x_0)\\prod_{t=2}^T q_{\\phi}(x_{t-1}|x_t,x_0).$$ The mean and diagnoal variance of the factors $q_{\\phi}(x_t|x_{t-1})$ and $q_{\\phi}(x_{t-1}|x_t,x_0)$ are parameterized by neural networks. The tractable ELBO can be derived for HVAEs: $$\\log p_{\\theta}(x_0)\\geq\\mathbb{E}_{q_{\\phi}(x_{1:T}|x_0)}\\left[\\log\\frac{p(x_T)\\prod_{t=1}^T p_{\\theta}(x_{t-1}|x_t)}{q_{\\phi}(x_{1:T}|x_0)}\\right]=\\mathcal{F}(\\theta,\\phi).$$ For the bottom-up factorization, the ELBO becomes: $$\\mathcal{F}(\\theta,\\phi)=\\mathbb{E}_{q_{\\phi}(x_{1:T}|x_0)}\\left[\\log p_{\\theta}(x_0|x_1)-\\sum_{t=1}^{T-1}\\text{KL}(q_{\\phi}(x_t|x_{t-1})||p_{\\theta}(x_t|x_{t+1}))-\\text{KL}(q_{\\phi}(x_T|x_{T-1})||p(x_T))\\right].$$ For the top-down factorization, the ELBO becomes: $$\\mathcal{F}(\\theta,\\phi)=\\mathbb{E}_{q_{\\phi}(x_{1:T}|x_0)}\\left[\\log p_{\\theta}(x_0|x_1)-\\sum_{t=2}^T\\text{KL}(q_{\\phi}(x_{t-1}|x_t,x_0)||p_{\\theta}(x_{t-1}|x_t))-\\text{KL}(q_{\\phi}(x_T|x_0)||p(x_T))\\right].$$ The parameters of both generation and inference models are learned jointly by maximizing the ELBO. To reduce the model size, parameter sharing between the generation and inference models is possible. HVAEs are very flexible and expressive, since only the last latent variable $x_T$ is constrained to be standard Gaussian and the model will need to figure out the intermediate latent variables $x_{1:T-1}$. This causes even more difficulties during optimization than VAEs. Denoising Diffusion Probabilistic Models (DDPMs) DDPMs are a class of state-of-the-art deep generative models. DDPMs define a fixed bottom-up inference model (or diffusion process): $$q(x_{1:T}|x_0)=\\prod_{t=1}^T q(x_t|x_{t-1}).$$ No dimensionality reduction is performed $(d=n)$. The factors are predefined Gaussian convolution kernels: $$q(x_t|x_{t-1})=\\mathcal{N}(x_t|\\sqrt{\\alpha_t}x_{t-1},(1-\\alpha_t)I).$$ $$\\implies q(x_t|x_0)=\\mathcal{N}(x_t|\\sqrt{\\bar{\\alpha}_t}x_0,(1-\\bar{\\alpha}_t)I),\\quad \\bar{\\alpha}_t=\\prod_{s=1}^t \\alpha_s.$$ The top-down form of the inference model is analytically tractable: $$q(x_{t-1}|x_t,x_0)=\\mathcal{N}(x_{t-1}|\\tilde{\\mu}(x_t,x_0),\\tilde{\\sigma}_t^2),$$ where $$\\tilde{\\mu}(x_t,x_0)=\\frac{\\sqrt{\\bar{\\alpha}_{t-1}}(1-\\alpha_t)}{1-\\bar{\\alpha}_t}x_0+\\frac{\\sqrt{\\alpha_t}(1-\\bar{\\alpha}_{t-1})}{1-\\bar{\\alpha}_t}x_t,$$ $$\\tilde{\\sigma}_t^2=\\frac{(1-\\bar{\\alpha}_{t-1})(1-\\alpha_t)}{1-\\bar{\\alpha}_t}.$$ Sketch of proof: By Bayes\u0026rsquo; rule and the Markovian property, we have $$q(x_{t-1}|x_t,x_0)= \\frac{q(x_t|x_{t-1},x_0)q(x_{t-1}|x_0)}{q(x_t|x_0)}\\propto q(x_t|x_{t-1})q(x_{t-1}|x_0).$$ Since everything is Gaussian with analytical expression, $\\tilde{\\mu}(x_t,x_0)$ and $\\tilde{\\sigma}_t^2$ can be figured out by moment matching. The tractable ELBO can be derived for DDPMs: $$ \\begin{aligned} \\mathcal{F}(\\theta) \u0026amp;= \\mathbb{E}_{q(x_{1:T}|x_0)}\\left[\\log p_{\\theta}(x_0|x_1)-\\sum_{t=2}^T\\text{KL}(q(x_{t-1}|x_t,x_0)||p_{\\theta}(x_{t-1}|x_t))-\\text{KL}(q(x_T|x_0)||p(x_T))\\right] \\\\ \u0026amp;= \\mathbb{E}_{q(x_{1:T}|x_0)}\\left[\\log p_{\\theta}(x_0|x_1)-\\sum_{t=2}^T \\frac{\\lVert\\tilde{\\mu}(x_t,x_0)-\\mu_{\\theta}(x_t,t)\\rVert^2}{2\\sigma_t^2}\\right]+const. \\end{aligned} $$ In constrast to HVAEs with flexible intermediate latent variables, the fixed inference model in DDPMs provides extra supervision signals for the intermediate latent variables. The objective for each intermediate latent variable looks like a regression objective and is much easier to optimize. The ELBO can be further simplified using variance reduction techniques with the reparameterization trick: Reparameterize $x_0$ according to the predefined inference model $q(x_t|x_0)$: $$x_t=\\sqrt{\\bar{\\alpha}_t}x_0+\\sqrt{1-\\bar{\\alpha}_t}\\epsilon\\quad\\implies\\quad x_0=\\frac{x_t-\\sqrt{1-\\bar{\\alpha}_t}\\epsilon}{\\sqrt{\\bar{\\alpha}_t}},\\quad\\epsilon\\sim\\mathcal{N}(0,I).$$ Plug in the reparameterized $x_0$ to $\\tilde{\\mu}(x_t,x_0)$: $$\\tilde{\\mu}(x_t,x_0)=\\tilde{\\mu}\\left(x_t,\\frac{x_t-\\sqrt{1-\\bar{\\alpha}_t}\\epsilon}{\\sqrt{\\bar{\\alpha}_t}}\\right)=\\frac{1}{\\sqrt{\\alpha_t}}\\left(x_t-\\frac{1-\\alpha_t}{\\sqrt{1-\\bar{\\alpha}_t}}\\epsilon\\right).$$ Reparameterize $\\mu_{\\theta}(x_t,t)$ in the same form as $\\tilde{\\mu}(x_t,x_0)$: $$\\mu_{\\theta}(x_t,t)=\\frac{1}{\\sqrt{\\alpha_t}}\\left(x_t-\\frac{1-\\alpha_t}{\\sqrt{1-\\bar{\\alpha}_t}}\\epsilon_{\\theta}(x_t,t)\\right).$$ The regression objectives can then be simplified to noise matching with a time-dependent noise prediction network $\\epsilon_{\\theta}(x_t,t)$: $$\\sum_{t=1}^T\\lambda(t)\\mathbb{E}_{\\mathcal{N}(\\epsilon|0,I)}[\\lVert\\epsilon-\\epsilon_{\\theta}(\\sqrt{\\bar{\\alpha}_t}x_0+\\sqrt{1-\\bar{\\alpha}_t}\\epsilon,t)\\rVert^2].$$ The analytical solution for the weighting function is given by $$\\lambda(t)=\\frac{(1-\\alpha_t)^2}{2\\sigma_t^2\\alpha_t(1-\\bar{\\alpha}_t)}.$$ However, setting $\\lambda(t)=1$ makes training much more stable in practice. Sampling/generation is simply initializing $x_T\\sim \\mathcal{N}(0,I)$ and drawing $x_{t-1}\\sim p_{\\theta}(x_{t-1}|x_t)$ for $t=T,\\cdots,1$: $$x_{t-1}=\\frac{1}{\\sqrt{\\alpha_t}}\\left(x_t-\\frac{1-\\alpha_t}{\\sqrt{1-\\bar{\\alpha}_t}}\\epsilon_{\\theta}(x_t,t)\\right)+\\sigma_t z_t,\\quad z_t\\sim\\mathcal{N}(0,I).$$ The variance of $p_{\\theta}(x_{t-1}|x_t)$ can be set to $$\\sigma_t^2=1-\\alpha_t\\quad\\text{or}\\quad \\sigma_t^2=\\tilde{\\sigma}_t^2=\\frac{(1-\\bar{\\alpha}_{t-1})(1-\\alpha_t)}{1-\\bar{\\alpha}_t},$$ which work equally well in practice for large $T$. Connection to score matching and score-based diffuson models: Denoising score matching with a time-dependent score network $s_{\\theta}(x_t, t)$: $$ \\begin{aligned} \\mathbb{E}_{q(x_t|x_0)}\\left[\\lVert\\nabla_{x_t}\\log q(x_t|x_0)-s_{\\theta}(x_t, t)\\rVert^2\\right] \u0026amp;=\\mathbb{E}_{q(x_t|x_0)}\\left[\\left\\lVert\\frac{x_t-\\sqrt{\\bar{\\alpha}_t}x_0}{1-\\bar{\\alpha}_t}+s_{\\theta}(x_t, t)\\right\\rVert^2\\right] \\\\ \u0026amp;= \\mathbb{E}_{\\mathcal{N}(\\epsilon|0,I)}\\left[\\left\\lVert\\frac{\\epsilon}{\\sqrt{1-\\bar{\\alpha}_t}}+s_{\\theta}(\\sqrt{\\bar{\\alpha}_t}x_0+\\sqrt{1-\\bar{\\alpha}_t}\\epsilon, t)\\right\\rVert^2\\right]. \\end{aligned} $$ Therefore, the score network $s_{\\theta}(x_t,t)$ and the noise prediction network $\\epsilon_{\\theta}(x_t,t)$ have the following connection: $$s_{\\theta}(x_t,t)=-\\frac{\\epsilon_{\\theta}(x_t,t)}{\\sqrt{1-\\bar{\\alpha}_t}}.$$ The sampling procedure of DDPM corresponds to the predictor step (numerical SDE solution with discretization) in the predictor-corrector sampling precedure of score-based diffusion models. One could also in principle introduce the corrector step in DDPM sampling by leveraging the relationship between $s_{\\theta}(x_t, t)$ and $\\epsilon_{\\theta}(x_t, t)$ above. Denoising Diffusion Implicit Models (DDIMs) DDIMs define a fixed top-down inference model: $$q(x_{1:T}|x_0)=q(x_T|x_0)\\prod_{t=2}^T q(x_{t-1}|x_t,x_0).$$ No dimensionality reduction is performed $(d=n)$. The factors are predefined Gaussians to ensure that $q(x_t|x_0)=\\mathcal{N}(x_t|\\sqrt{\\bar{\\alpha}_t}x_0+(1-\\bar{\\alpha}_t)I)$ as in DDPMs: $$q(x_{t-1}|x_t,x_0)=\\mathcal{N}\\left(x_{t-1}\\left|\\sqrt{\\bar{\\alpha}_{t-1}}x_0+\\frac{x_t-\\sqrt{\\bar{\\alpha}_t}x_0}{\\sqrt{1-\\bar{\\alpha}_t}}\\sqrt{1-\\bar{\\alpha}_{t-1}-s_t^2},s_t^2\\right)\\right..$$ Note that the forward diffusion process induced by a DDIM is not necessarily Markovian: $$q(x_t|x_{t-1},x_0)=\\frac{q(x_{t-1}|x_t,x_0)q(x_t|x_0)}{q(x_{t-1}|x_0)},$$ since $x_t$ could depend on both $x_{t-1}$ and $x_0$ for some choices of the variance $s_t^2$. The variance $s_t^2$ controls how stochastic the forward diffusion process is. $x_{t-1}$ becomes a deterministic function of $x_t$ and $x_0$ for $s_t=0$. If we set the variance $s_t^2$ as in DDPM: $$s_t^2=\\tilde{\\sigma}_t^2=\\frac{(1-\\bar{\\alpha}_{t-1})(1-\\alpha_t)}{1-\\bar{\\alpha}_t},$$ then DDIM recovers DDPM which has a markovian forward diffusion process: $$q(x_t|x_{t-1},x_0)=q(x_t|x_{t-1})=\\mathcal{N}(x_t|\\sqrt{\\alpha_t}x_0+(1-\\alpha_t)I).$$ The generation models are defined as $$\\begin{aligned} p_{\\theta}(x_{t-1}|x_t) \u0026amp;=\\int q(x_{t-1}|x_t,x_0)p_{\\theta}(x_0|x_t)dx_0 \\\\ \u0026amp;\\approx q(x_{t-1}|x_t,\\tilde{x}_0(x_t)),\\quad \\tilde{x}_0(x_t)\\sim p_{\\theta}(x_0|x_t). \\end{aligned}$$ where we reparameterize $\\tilde{x}_0(x_t)$ according to the forward diffusion process: $$ \\tilde{x}_0(x_t)=\\frac{x_t-\\sqrt{1-\\bar{\\alpha}_t}\\epsilon_{\\theta}(x_t, t)}{\\sqrt{\\bar{\\alpha}_t}}. $$ The training objective for DDIM has the identical form (up to an additive constant) to that for DDPM with a different weighting function $\\lambda(t)$ for each choice of the variance $s_t^2$ in $q(x_{t-1}|x_t,x_0)$. Sampling/generation is simply initializing $x_T\\sim \\mathcal{N}(0,I)$ and drawing $x_{t-1}\\sim p_{\\theta}(x_{t-1}|x_t)$ for $t=T,\\cdots,1$: $$x_{t-1}=\\frac{x_t-\\sqrt{1-\\bar{\\alpha}_t}\\epsilon_{\\theta}(x_t, t)}{\\sqrt{\\alpha_t}}+\\epsilon_{\\theta}(x_t, t)\\sqrt{1-\\bar{\\alpha}_{t-1}-s_t^2}+s_t e,\\quad e\\sim\\mathcal{N}(0,I).$$ DDPM is a special case with $s_t^2=\\tilde{\\sigma}_t^2$. $s_t=0$ results in a deterministic generation process. ","date":1718150400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1718150400,"objectID":"85e73f94555f323fbd8d619256569259","permalink":"https://wenlin-chen.github.io/post/diffusion_and_latent_variable_models/","publishdate":"2024-06-12T00:00:00Z","relpermalink":"/post/diffusion_and_latent_variable_models/","section":"post","summary":"Latent Variable Models Introduction Observed data: $x\\in\\mathcal{X}\\subseteq\\mathbb{R}^n$. Latent variable: $z\\in\\mathbb{R}^d$ ($d\\leq n$). The joint distribution is factorized as the product of likelihood and prior: $$p_{\\theta}(x,z)=p_{\\theta}(x|z)p(z).$$ The likelihood (or decoder/generation model) is a Gaussian distribution with mean parameterized by a neural network: $$p_{\\theta}(x|z)=\\mathcal{N}(x|\\mu_{\\theta}(z),\\sigma^2I).","tags":null,"title":"Diffusion and Latent Variable Models","type":"post"},{"authors":null,"categories":null,"content":"Generative Modeling Problem Setting Data distribution $p_{\\text{data}}(x)$ is unknown. Samples from $p_{\\text{data}}(x)$ are available. Goals Estimate the density of the data distribution $p_{\\text{data}}(x)$. Generate new samples from $p_{\\text{data}}(x)$. Score Matching for Diffusion Models Notation Denote data by $x_0=x$ and noise by $x_T$. Wiener process SDE ($dt\u0026gt;0$): $$dw_t=z\\sqrt{dt},\\quad z\\sim\\mathcal{N}(0,I).$$ Diffusion Process Forward diffusion SDE ($dt\u0026gt;0$): $$dx_t=f_t(x_t)dt+g_tdw_t.$$ Forward diffusion SDE corrupts data to noise. $f_t(x_t)$ is a vector-valued drift coefficient. $g_t$ is a scalar-valued diffusion coefficient. Reverse diffusion SDE ($dt\u0026lt;0$): $$dx_t=\\left(f_t(x_t)-g_t^2\\nabla_{x_t} \\log p_t(x_t)\\right)dt + g_tdw_t.$$ Reverse diffusion SDE recovers data from noise. Probability flow ODE ($dt\u0026lt;0$): $$dx_t=\\left(f_t(x_t)-\\frac{1}{2}g_t^2\\nabla_{x_t} \\log p_t(x_t)\\right)dt.$$ Probability flow ODE and reverse diffusion SDE have the same marginal $p_t(x_t)$ at every time $t$. Probability flow ODE allows for likelihood evaluation for test or generated samples as it converts a diffusion model to a continuous normalizing flow (see the flow section below for details about likelihood evaluation). Denoising Score Matching To generate data using the reverse diffusion SDE or probability flow PDE starting from a tractable noise distribution $\\pi(x_T)$, we need to estimate the score $\\nabla_{x_t} \\log p_t(x_t)$ at every time $t$. Learn a time-dependent score network $s_{\\theta}(x_t, t)$ by minimizing the score matching objetive: $$\\mathcal{L}_{SM}(\\theta) = \\mathbb{E}_{p_t(x_t)\\mathcal{U}(t|0,T)}[\\lambda(t)\\lVert s_{\\theta}(x_t, t) - \\nabla_{x_t} \\log p_t(x_t)\\rVert^2].$$ The score matching objective is intractable since we do not know the true score $\\nabla_{x_t} \\log p_t(x_t)$. We instead minimize the tractable denoising score matching objective: $$\\mathcal{L}_{DSM}(\\theta)=\\mathbb{E}_{p_{t|0}(x_t|x_0)p_{\\text{data}}(x_0)\\mathcal{U}(t|0,T)}[\\lambda(t)\\lVert s_{\\theta}(x_t, t) - \\nabla_{x_t} \\log p_{t|0}(x_t|x_0)\\rVert^2].$$ It can be shown that $\\nabla_{\\theta}\\mathcal{L}_{SM}(\\theta)=\\nabla_{\\theta}\\mathcal{L}_{DSM}(\\theta).$ Proof: See my notes on Score Identities for Sampling and Generative Modeling. Weighting function $\\lambda(t)$: Magnitude weighting balances the magnitude of the score matching loss across time $t$: $$\\lambda(t)\\propto1/\\lVert \\nabla_{x_t} \\log p_{t|0}(x_t|x_0)\\rVert^2.$$ Likelihood weighting $\\lambda(t)=g_t^2$ leads to a nice connection between KL divergence and Fisher divergence: $$\\text{KL}(p_{\\text{data}}(x_0)||p_{\\theta}(x_0))\\leq\\frac{T}{2}\\mathbb{E}_{p_t(x_t)\\mathcal{U}(t|0,T)}[g_t^2\\lVert s_{\\theta}(x_t, t) - \\nabla_{x_t} \\log p_t(x_t)\\rVert^2]+\\text{KL}(p_T(x_T)||\\pi(x_T)).$$ Predictor-corrector samplers for generation: correct the discretization errors in the numerical SDE solution with MCMC. Initialize $x\\sim \\pi(x)$ and $t\\gets T$. Repeat the following two steps until $t=0$: Predictor (numerical SDE solver with small discretization step $\\Delta t\u0026lt;0$): $$\\Delta x\\gets\\left(f_t(x)-g_t^2 s_{\\theta}(x, t)\\right)\\Delta t + g_t\\sqrt{|\\Delta t|}z,\\quad z\\sim N(0,I).$$ $$x\\gets x+\\Delta x.$$ $$t\\gets t+\\Delta t.$$ Corrector (a few steps of Langevin dynamics with step-size $\\eta$): $$x\\gets x+\\eta s_{\\theta}(x,t)+\\sqrt{2\\eta}z,\\quad z\\sim N(0,I).$$ Why do we need multiple noise levels? Large noise corrupts the data distribution $p_{\\text{data}}(x_0)$ too much and will produce samples from the wrong distribution. When the noise level is small, $p_{\\text{data}}(x_0)$ can have many low density regions in real-world applications. Since $\\mathcal{L}_{DSM}(\\theta)$ is weighted by $p_{\\text{data}}(x_0)$, the score estimates in the low density regions can be very poor. Since (random) initial samples are highly likely located in one of the low density regions, it is difficult for Langevin dynamics to move them to the high density regions due to poor score estimates at the beginning. Score functions are blind for densities with disconnected support. To see this, consider a mixture of two distributions $$p_{\\text{data}}(x_0)=w r_1(x_0) + (1-w) r_2(x_0)$$ with disjoint supports $\\mathcal{X}_1$ and $\\mathcal{X}_2$ for the two mixture components. The score function is given by $$\\nabla_x \\log p_{\\text{data}}(x_0)= \\begin{cases}\\nabla_x \\log r_1(x_0), \u0026amp;x\\in\\mathcal{X}_1\\\\ \\nabla_x \\log r_2(x_0), \u0026amp;x\\in\\mathcal{X}_2\\end{cases},$$ which contains no information of the mixture weight $w$. In theory, one regularity condition of score matching is $p_{\\text{data}}(x_0)\u0026gt;0$ everywhere. In practice, there will also be an issue when the mixture components are weakly connected. Hence, score matching with small noise is unable capture the correct weighting between different modes and will lead to biased samples. Therefore, we need to start with a large noise level to make the modes connected, which enables accurate estimation of the weight for each mode. The noise level is gradually reduced to zero so that the samples are refined to be distributed as $p_{\\text{data}}(x_0)$ with correct weighting. Flow Matching for Continuous Normalizing Flows Notation Denote data by $x_T=x$ and noise by $x_0$ This follows the convention in flow matching. Note: this is the opposite to the definition in diffusion models. Discrete Normalizing Flow Discrete normalzing flow with an invertible transformation function $\\phi$ (and $T=1$): $$x_1=\\phi(x_0),\\quad x_0\\sim\\pi(x_0),$$ $$\\log p(x_1)=\\log \\pi(\\phi^{-1}(x_1)) +\\log\\left|\\det\\frac{\\partial \\phi^{-1}(x_1)}{\\partial x_1}\\right|.$$ Compose $T$ discrete normalizing flows: $$x_{t+1}=\\phi_{t}(x_t),$$ $$\\phi=\\phi_{T-1}\\circ\\cdots\\circ\\phi_0,$$ $$\\log p(x_T)=\\log \\pi(\\phi^{-1}(x_T)) +\\sum_{t=1}^T\\log\\left|\\det\\frac{\\partial \\phi_{t-1}^{-1}(x_t)}{\\partial x_{t}}\\right|.$$ Discrete residual flow transformation: $$\\phi_t(x_t)=x_{t+1}=x_t+\\delta u_t(x_t).$$ $u_t$ needs to be $1/\\delta$-Lipschitz to guarantee the invertibility of $\\phi_t$. Learn a parametric flow transformation function $\\phi_{\\theta}$ by MLE: $$\\max_{\\theta}~\\mathbb{E}_{p_{\\text{data}}(x_T)}[\\log p_{\\theta}(x_T)].$$ We need to enforce invertibility in the architecture of $\\phi_{\\theta}$. We need to compute and backpropagate through the inverse and Jacobian for $\\phi_{\\theta}$. Continuous Normalizing Flow Continuous residual flow transformation: $$x_{t+\\delta}=x_t+\\delta u_t(x_t).$$ $$u_t(x_t)=\\lim_{\\delta\\to0}\\frac{x_{t+\\delta}-x_t}{\\delta}=\\frac{dx_t}{dt}.$$ Continuous normalizing flow with a transformation function $\\phi_t$ induced by the vector field $u_t$: $$\\frac{dx_t}{dt}=u_t(x_t)\\quad\\implies\\quad x_t=x_0+\\int_0^t u_s(x_s)ds,\\quad x_0\\sim\\pi(x_0),$$ Set $T=1$ following convention. The flow transformation is defined as $x_t=\\phi_t(x_0)$. The probability path $p_t$ induced by the vector field $u_t$ follows $$\\frac{d}{dt}\\log p_t(x_t)=-\\nabla_{x_t}\\cdot u_t(x_t)\\quad\\implies\\quad\\log p_t(x_t)=\\log\\pi(x_0)-\\int_{0}^t\\nabla_{x_s}\\cdot u_s(x_s)ds.$$ Proof: By the transport equation, we have $$ \\begin{aligned} \\frac{\\partial}{\\partial t} p_t(x_t) \u0026amp;= -\\nabla_{x_t}\\cdot(u_t(x_t)p_t(x_t)) \\\\ \u0026amp;= -p_t(x_t)\\nabla_{x_t}\\cdot u_t(x_t)-\\left\u0026lt;\\nabla_{x_t}p_t(x_t),u_t(x_t)\\right\u0026gt;. \\end{aligned}$$ The total derivative is then given by $$ \\begin{aligned} \\frac{d}{d t} p_t(x_t) \u0026amp;= \\frac{\\partial}{\\partial t} p_t(x_t) + \\left\u0026lt;\\nabla_{x_t}p_t(x_t),\\frac{dx_t}{d t}\\right\u0026gt; \\\\ \u0026amp;= -p_t(x_t)\\nabla_{x_t}\\cdot u_t(x_t)-\\left\u0026lt;\\nabla_{x_t}p_t(x_t),u_t(x_t)\\right\u0026gt; + \\left\u0026lt;\\nabla_{x_t}p_t(x_t),u_t(x_t)\\right\u0026gt; \\\\ \u0026amp;= -p_t(x_t)\\nabla_{x_t}\\cdot u_t(x_t). \\end{aligned} $$ Therefore, we have $$\\frac{d}{dt}\\log p_t(x_t)=\\frac{1}{p_t(x_t)}\\frac{d}{d t} p_t(x_t)=-\\nabla_{x_t}\\cdot u_t(x_t).$$ The transport equation for diffusion models with $u_t(x_t)=f_t(x_t)-\\frac{1}{2}g_t^2\\nabla_{x_t} \\log p_t(x_t)$ is the Fokker-Planck equation: $$\\frac{\\partial}{\\partial t} p_t(x_t)+\\nabla_{x_t}\\cdot(f_t(x_t)p_t(x_t))-\\frac{1}{2}g_t^2\\nabla_{x_t}^2p_t(x_t)=0.$$ In practice, both $x_t$ and $\\log p_t(x_t)$ can be solved jointly using a numerical ODE integrator: $$ \\frac{d}{dt} \\begin{pmatrix} x_t \\\\ \\log p_t(x_t) \\end{pmatrix}= \\begin{pmatrix} u_t(x_t) \\\\ -\\nabla_{x_t}\\cdot u_t(x_t) \\end{pmatrix}. $$ Note that there are many different vector fields $u_t$ that can induce probability paths between $p_0$ and $p_1$. Learn a parameteric time-dependent vector field $u_{\\theta}(x_t, t)$ by MLE: $$\\max_{\\theta}~\\mathbb{E}_{p_{\\text{data}}(x_1)}[\\log p_{\\theta}(x_1)].$$ We do not need to choose the number of flow transformations as in composed discrete normalizing flows. $u_t$ only needs to be $L$-Lipschitz with any value $L$ to guarantee the invertibility of $\\phi_t$. Numerical simulation of the ODE with backpropagation makes training very slow and expensive. Divergence estimator scales poorly with dimensionality. Conditional Flow Matching We want a simulation-free objective like score matching. Learn a time-dependent vector field $u_{\\theta}(x_t, t)$ by minimizing the flow matching objetive: $$\\mathcal{L}_{FM}(\\theta)=\\mathbb{E}_{p_t(x_t)\\mathcal{U}(t|0,1)}[\\lVert u_{\\theta}(x_t, t)-u_t(x_t)\\rVert^2].$$ The flow matching objective is intractable since we do not know the true vector field $u_t(x_t)$. To circumvent the intractability, we consider a specific probability path $p_t(x_t)$ defined by a conditional probability path $p_{t|1}(x_t|x_1)$: $$p_t(x_t)=\\int p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)dx_1,$$ with boundary conditions $$p_{0|1}(x)=\\pi(x)\\implies p_0(x_0)=\\pi(x_0),$$ $$p_{1|1}(x)=\\delta(x-x_1)\\implies p_1(x_1)=p_{\\text{data}}(x_1).$$ The marginal vector field $u_t$ can be obtained from the corresponding conditional vector field $u_{t|1}(x_t|x_1)$ and conditional probability path $p_{t|1}(x_t|x_1)$ through the following identity: $$u_t(x_t)=\\mathbb{E}_{p_{1|t}(x_1|x_t)}[u_{t|1}(x_t|x_1)]=\\int u_{t|1}(x_t|x_1)\\frac{p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)}{p_t(x_t)}dx_1.$$ Proof: We verify that this is consistent with the transport equation for the marginals. $$ \\begin{aligned} \\frac{\\partial}{\\partial t}p_t(x_t) \u0026amp;= \\frac{\\partial}{\\partial t} \\int p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)dx_1 \\\\ \u0026amp;= \\int \\frac{\\partial}{\\partial t} p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)dx_1 \\\\ \u0026amp;= - \\int \\nabla_{x_t}\\cdot (u_{t|1}(x_t|x_1)p_{t|1}(x_t|x_1)) p_{\\text{data}}(x_1)dx_1 \\\\ \u0026amp;= - \\int \\nabla_{x_t}\\cdot (u_{t|1}(x_t|x_1)p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)) dx_1 \\\\ \u0026amp;= - \\nabla_{x_t}\\cdot \\int u_{t|1}(x_t|x_1)p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1) dx_1 \\\\ \u0026amp;= - \\nabla_{x_t}\\cdot \\left( \\int u_{t|1}(x_t|x_1)\\frac{p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)}{p_t(x_t)} dx_1 p_t(x_t) \\right) \\\\ \u0026amp;= - \\nabla_{x_t}\\cdot (u_t(x_t) p_t(x_t)). \\\\ \\end{aligned} $$ We now introduce a tractable conditional flow matching objective: $$\\mathcal{L}_{CFM}(\\theta)=\\mathbb{E}_{p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)\\mathcal{U}(t|0,1)}[\\lVert u_{\\theta}(x_t,t)-u_{t|1}(x_t|x_1) \\rVert^2].$$ It can be shown that $\\nabla_{\\theta}\\mathcal{L}_{FM}(\\theta)=\\nabla_{\\theta}\\mathcal{L}_{CFM}(\\theta)$. Proof: We follow a similar idea to the proof of denoising score matching but with the following equality. $$ \\begin{aligned} \\mathbb{E}_{p_t(x_t)}[\\left\u0026lt;u_{\\theta}(x_t,t),u_t(x_t)\\right\u0026gt;] \u0026amp;= \\int \\left\u0026lt;u_{\\theta}(x_t,t),u_t(x_t)\\right\u0026gt; p_t(x_t) dx_t \\\\ \u0026amp;= \\int \\left\u0026lt;u_{\\theta}(x_t,t),\\int u_{t|1}(x_t|x_1)\\frac{p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)}{p_t(x_t)}dx_1\\right\u0026gt; p_t(x_t) dx_t \\\\ \u0026amp;= \\iint \\left\u0026lt;u_{\\theta}(x_t,t),u_{t|1}(x_t|x_1)\\right\u0026gt; p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)dx_1 dx_t \\\\ \u0026amp;= \\mathbb{E}_{p_{t|1}(x_t|x_1)p_{\\text{data}}(x_1)}[\\left\u0026lt;u_{\\theta}(x_t,t),u_{t|1}(x_t|x_1)\\right\u0026gt;]. \\end{aligned} $$ In practice, we may want our conditional vector field $u_{t|1}$ to generate a conditional Gaussian probability path: $$p_{t|1}(x_t|x_1)=\\mathcal{N}(x_t|\\mu_t(x_1),\\sigma_t(x_1)^2I),$$ with boundary conditions $$\\mu_0(x_1)=0,~\\sigma_0(x_1)=1\\quad\\implies\\quad p_{0|1}(x|x_1)=\\pi(x)=\\mathcal{N}(x|0,I),$$ $$\\mu_1(x_1)=x_1,\\quad\\sigma_1(x_1)=0\\quad\\implies\\quad p_{1|1}(x|x_1)=\\delta(x-x_1).$$ One correpsonding conditional vector field is given by $$u_{t|1}(x_t|x_1)=\\frac{x-\\mu_t(x_1)}{\\sigma_t(x_1)}\\frac{d\\sigma_t(x_1)}{d t}+\\frac{d \\mu_t(x_1)}{d t},$$ with a conditional flow transformation $$x_t(x_1)=\\phi_{t|1}(x_0|x_1)=\\mu_t(x_1)+\\sigma_t(x_1)x_0.$$ Proof: We verify that the following two quantities are identical. $$\\frac{d}{dt}x_t(x_1)=\\frac{d}{dt}\\mu_t(x_1)+x_0\\frac{d}{dt}\\sigma_t(x_1),$$ and $$ \\begin{aligned} u_{t|1}(x_t(x_1)|x_1) \u0026amp;= \\frac{\\mu_t(x_1)+\\sigma_t(x_1)x_0-\\mu_t(x_1)}{\\sigma_t(x_1)}\\frac{d\\sigma_t(x_1)}{d t}+\\frac{d \\mu_t(x_1)}{d t} \\\\ \u0026amp;=x_0\\frac{d}{dt}\\sigma_t(x_1)+\\frac{d}{dt}\\mu_t(x_1). \\end{aligned} $$ Reparameterize the conditional flow matching objective: $$\\implies \\mathcal{L}_{CFM}(\\theta)=\\mathbb{E}_{\\pi(x_0)p_{\\text{data}}(x_1)\\mathcal{U}(t|0,1)}\\left[\\left\\lVert u_{\\theta}(\\mu_t(x_1)+\\sigma_t(x_1)x_0,t)-\\left(\\frac{d}{dt}\\mu_t(x_1)+x_0\\frac{d}{dt}\\sigma_t(x_1) \\right)\\right\\rVert^2\\right].$$ Example with optimal transport conditional vector field (linear interpolation): $$\\mu_t(x_1)=tx_1,\\quad \\sigma_t(x_1)=(1-t)+t\\sigma_{min}=1-(1-\\sigma_{min})t.$$ $$\\implies x_t(x_1)=tx_1+(1-(1-\\sigma_{min})t)x_0.$$ $$\\implies u_{t|1}(x_t(x_1)|x_1)=x_1-(1-\\sigma_{min})x_0.$$ $$\\implies \\mathcal{L}_{CFM}(\\theta)=\\mathbb{E}_{\\pi(x_0)p_{\\text{data}}(x_1)\\mathcal{U}(t|0,1)}[\\lVert u_{\\theta}(tx_1+(1-(1-\\sigma_{min})t)x_0,t)-(x_1-(1-\\sigma_{min})x_0) \\rVert^2].$$ Two problems with conditional flow matching: The estimate of the gradient $\\nabla_{\\theta} \\mathcal{L}_{CFM}(\\theta)$ is of high variance since there are many possible data $x_1$ corresponding to a noise $x_0$ due to intersection of probability paths for different realizations of $u_{t|1}(x_t|x_1)$ with different values of the conditioning variable $x_1$. Sampling is slow at generation time since it is difficult to integrate ODE with non-straight path induced by the learned marginal vector field $u_{\\theta}(u_t,t)$. Coupling: instead of maping between data $x_1$ and noise $x_0$ (i.e., one-sided conditioning), we can similarly map between any two variables $x_0$ and $x_1$ with two-sided conditioning: $$p_t(x_t)=\\iint p_{t|0,1}(x_t|x_0,x_1)p_{\\text{data}}(x_0,x_1)dx_0dx_1,$$ with boundary conditions $$p_{0|0,1}(x|x_0,x_1)=\\delta(x-x_0)\\implies p_0(x_0)=p_{\\text{data}}(x_0),$$ $$p_{1|0,1}(x|x_0,x_1)=\\delta(x-x_1)\\implies p_1(x_1)=p_{\\text{data}}(x_1).$$ ","date":1717891200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1717891200,"objectID":"d284046991e13e2dbafd3ab7467a0162","permalink":"https://wenlin-chen.github.io/post/score_flow_matching/","publishdate":"2024-06-09T00:00:00Z","relpermalink":"/post/score_flow_matching/","section":"post","summary":"Generative Modeling Problem Setting Data distribution $p_{\\text{data}}(x)$ is unknown. Samples from $p_{\\text{data}}(x)$ are available. Goals Estimate the density of the data distribution $p_{\\text{data}}(x)$. Generate new samples from $p_{\\text{data}}(x)$. Score Matching for Diffusion Models Notation Denote data by $x_0=x$ and noise by $x_T$.","tags":null,"title":"Score and Flow Matching","type":"post"},{"authors":null,"categories":null,"content":"Introduction Problem Setting Data distribution: $$p(x)=\\frac{\\exp(-E(x))}{Z}.$$ Intractable normalizing constant: $$Z=\\int \\exp(-E(x)) dx.$$ Tractable score function: $$\\nabla_x \\log p(x)=-\\nabla_x E(x).$$ Goal: generate new samples from $p(x)$. Sampling: The energy function $E$ is given. No available samples from $p(x)$. Generative Modeling: Samples from $p(x)$ are available. The energy function $E$ is usually unknown and needs to be learned from data. In some rare settings, the energy function $E$ is also given. Diffusion Gaussian convolution kernel: $$p(y|x)=\\mathcal{N}(y|\\alpha x,\\sigma^2 I).$$ Intractable noisy marginal: $$p(y)=\\int p(y|x)p(x)dx.$$ Intractable denoising posterior: $$p(x|y)=\\frac{p(y|x)p(x)}{p(y)}.$$ Intractable noisy score: $$\\nabla_y\\log p(y)=\\nabla_y\\log \\int p(y|x)p(x)dx.$$ Score Identities Denoising Score Identity Denoising score identity is a general formula without assumping the form of $p(y|x)$: $$\\nabla_y\\log p(y)=\\mathbb{E}_{p(x|y)}[\\nabla_y\\log p(y|x)]=\\int\\nabla_y\\log p(y|x) p(x|y)dx.$$ Proof: By definition, we have $$ \\begin{aligned} \\nabla_y\\log p(y) \u0026amp;= \\frac{\\int\\nabla_y p(y|x)p(x)dx}{p(y)} \\\\ \u0026amp;= \\int\\nabla_y\\log(y|x)\\frac{p(y|x)p(x)}{p(y)}dx \\\\ \u0026amp;= \\int\\nabla_y\\log p(y|x) p(x|y)dx. \\end{aligned} $$ Tweedie Score Identity Tweedie score identity assumes Gaussian convolution $p(y|x)=\\mathcal{N}(y|\\alpha x,\\sigma^2 I)$: $$\\nabla_y\\log p(y)=\\frac{\\alpha\\mathbb{E}_{p(x|y)}[ x ]-y}{\\sigma^2}=\\int\\left(\\frac{\\alpha x-y}{\\sigma^2}\\right)p(x|y)dx.$$ Proof: By denoising score identity, we have $$ \\begin{aligned} \\nabla_y\\log p(y) \u0026amp;= \\int\\nabla_y\\log p(y|x) p(x|y)dx \\\\ \u0026amp;= \\int\\nabla_y\\left(-\\frac{\\lVert y-\\alpha x\\rVert^2}{2\\sigma^2}\\right) p(x|y)dx \\\\ \u0026amp;= \\int \\left(\\frac{\\alpha x-y}{\\sigma^2}\\right)p(x|y)dx. \\end{aligned} $$ Target Score Identity Target score identity assumes Gaussian convolution $p(y|x)=\\mathcal{N}(y|\\alpha x,\\sigma^2 I)$: $$\\nabla_y\\log p(y)=\\alpha^{-1}\\mathbb{E}_{p(x|y)}[\\nabla_x\\log p(x)]=\\alpha^{-1}\\int \\nabla_x\\log p(x) p(x|y) dx.$$ Proof: By denoising score identity and using the following three identities $$\\nabla_y \\log p(y|x)=-\\alpha^{-1}\\nabla_x \\log p(y|x),$$ $$\\nabla_x \\log p(y|x)=\\nabla_x\\log p(x|y)-\\nabla_x \\log p(x),$$ $$\\int \\nabla_x\\log p(x|y)p(x|y)dx=\\int \\nabla_xp(x|y)dx=\\nabla_x\\int p(x|y)dx=0,$$ we have $$ \\begin{aligned} \\nabla_y\\log p(y) \u0026amp;= \\int\\nabla_y\\log p(y|x) p(x|y)dx \\\\ \u0026amp;= -\\alpha^{-1}\\int\\nabla_x\\log p(y|x) p(x|y)dx \\\\ \u0026amp;= \\alpha^{-1}\\int(\\nabla_x \\log p(x)-\\nabla_x\\log p(x|y)) p(x|y)dx \\\\ \u0026amp;= \\alpha^{-1}\\int\\nabla_x \\log p(x) p(x|y)dx. \\end{aligned} $$ Mixed Score Identity Mixed score identity assumes Gaussian convolution $p(y|x)=\\mathcal{N}(y|\\alpha x,\\sigma^2 I)$ with a variance-preserving scheme $\\sigma^2=1-\\alpha^2$: $$\\nabla_y\\log p(y)=\\mathbb{E}_{p(x|y)}[\\alpha(x+\\nabla_x\\log p(x))-y]=\\int (\\alpha(x+\\nabla_x\\log p(x))-y) p(x|y) dx.$$ Proof: Consider a convex combination of the target score identity and Tweedie score identity with coefficients $\\alpha^2$ and $1-\\alpha^2$: $$ \\begin{aligned} \\nabla_y\\log p(y) \u0026amp;= \\int \\left((\\alpha^2\\frac{\\nabla_x \\log p(x)}{\\alpha} + (1-\\alpha^2)\\frac{\\alpha x - y}{\\sigma^2}\\right)p(x|y)dx \\\\ \u0026amp;= \\int (\\alpha(x+\\nabla_x\\log p(x))-y) p(x|y) dx. \\end{aligned} $$ Applications in Score-based Sampling Monte Carlo Estimator Estimate the noisy score with Tweedie score identity using Monte Carlo: $$\\nabla_y \\log p(y)\\approx \\frac{\\frac{\\alpha}{K}\\sum_{k=1}^K x_k-y}{\\sigma^2},\\quad x_k\\sim p(x|y).$$ We may initialize the sampler for $p(x|y)$ with its mean $\\mathbb{E}_{p(x|y)}[ x ]$ estimated by importance sampling: $$\\mathbb{E}_{p(x|y)}[ x ]\\approx\\frac{\\sum_{l=1}^L x_l\\exp(-E(x_l))}{\\sum_{l=1}^L \\exp(-E(x_{l}))},\\quad x_l\\sim q(x|y)=\\mathcal{N}\\left(x\\left|\\frac{y}{\\alpha},\\left(\\frac{\\sigma}{\\alpha}\\right)^2I\\right)\\right..$$ This is the standard importance sampling approach. It does not work well in high dimensional space. Proof: Using the fact that $q(x|y)\\propto p(y|x)$, we have $$ \\begin{aligned} \\mathbb{E}_{p(x|y)}[ x ] \u0026amp;= \\int x p(x|y)dx \\\\ \u0026amp;= \\int x \\frac{p(y|x)p(x)}{p(y)}dx \\\\ \u0026amp;= \\frac{\\int x p(y|x)p(x)dx}{\\int p(y|x)p(x)dx} \\\\ \u0026amp;= \\frac{\\int x \\exp(-E(x))q(x|y)dx}{\\int \\exp(-E(x))q(x|y)dx} \\\\ \u0026amp;\\approx \\frac{\\sum_{l=1}^L x_l\\exp(-E(x_l))}{\\sum_{l=1}^L \\exp(-E(x_{l}))},\\quad x_l\\sim q(x|y). \\end{aligned} $$ Importance Sampling Estimator Estimate the noisy score with the target score identity using importance sampling: $$\\nabla_y \\log p(y)\\approx -\\frac{\\sum_{k=1}^K \\exp(-E(x_k))\\nabla_x E(x_k)}{\\alpha\\sum_{k=1}^K \\exp(-E(x_k))},\\quad x_k\\sim q(x|y)=\\mathcal{N}\\left(x\\left|\\frac{y}{\\alpha},\\left(\\frac{\\sigma}{\\alpha}\\right)^2I\\right)\\right..$$ This does not work well in practice as it only works for very small $t$. Proof: Using target score identity and the fact that $q(x|y)\\propto p(y|x)$, we have $$ \\begin{aligned} \\nabla_y\\log p(y) \u0026amp;= \\alpha^{-1}\\int \\nabla_x\\log p(x) p(x|y) dx \\\\ \u0026amp;= \\frac{\\int \\nabla_x\\log p(x) p(y|x)p(x) dx}{\\alpha p(y)} \\\\ \u0026amp;= \\frac{\\int \\nabla_x\\log p(x) p(y|x)p(x) dx}{\\alpha \\int p(y|x)p(x)dx} \\\\ \u0026amp;= \\frac{\\int \\nabla_x\\log p(x) \\exp(-E(x)) q(x|y) dx}{\\alpha \\int \\exp(-E(x)) q(x|y)dx} \\\\ \u0026amp;\\approx -\\frac{\\sum_{k=1}^K \\exp(-E(x_k))\\nabla_x E(x_k)}{\\alpha\\sum_{k=1}^K \\exp(-E(x_k))},\\quad x_k\\sim q(x|y). \\end{aligned} $$ Applications in Score-based Generative Modeling Denoising Score Matching Learn a noisy score network $s_{\\theta}(y)$ by minimizing $$ \\begin{aligned} \\mathcal{L}_{DSM}(\\theta) \u0026amp;= \\mathbb{E}_{p(y)}[\\lVert s_{\\theta}(y) - \\nabla_y \\log p(y)\\rVert^2] \\\\ \u0026amp;= \\mathbb{E}_{p(y|x)p(x)}[\\lVert s_{\\theta}(y) - \\nabla_y \\log p(y|x)\\rVert^2]+C. \\end{aligned} $$ This is the most popular generative modeling apporach. It is inaccurate for very small $t$. Proof: Using the denoising score identity, we have $$ \\begin{aligned} \\mathbb{E}_{p(y)}[\\lVert s_{\\theta}(y) - \\nabla_y \\log p(y)\\rVert^2] \u0026amp;= \\int \\lVert s_{\\theta}(y) - \\nabla_y \\log p(y)\\rVert^2 p(y) dy \\\\ \u0026amp;= \\int \\lVert s_{\\theta}(y) \\rVert^2 p(y) dy - 2 \\int \\left\u0026lt;s_{\\theta}(y),\\nabla_y \\log p(y)\\right\u0026gt;p(y)dy + C\u0026rsquo; \\\\ \u0026amp;= \\int \\lVert s_{\\theta}(y) \\rVert^2 p(y) dy - 2 \\iint \\left\u0026lt;s_{\\theta}(y),\\nabla_y\\log p(y|x) \\right\u0026gt;p(x|y)p(y)dxdy + C\u0026rsquo; \\\\ \u0026amp;= \\int \\lVert s_{\\theta}(y) \\rVert^2 p(y) dy - 2 \\iint \\left\u0026lt;s_{\\theta}(y),\\nabla_y\\log p(y|x) \\right\u0026gt;p(y|x)p(x)dxdy + C\u0026rsquo; \\\\ \u0026amp;= \\iint \\left( \\lVert s_{\\theta}(y) \\rVert^2 + \\lVert \\nabla_y\\log p(y|x) \\rVert^2 - 2 \\left\u0026lt;s_{\\theta}(y),\\nabla_y\\log p(y|x) \\right\u0026gt;\\right)p(y|x)p(x)dxdy + C \\\\ \u0026amp;= \\iint \\lVert s_{\\theta}(y) - \\nabla_y \\log p(y|x)\\rVert^2 p(y|x)p(x)dxdy + C \\\\ \u0026amp;= \\mathbb{E}_{p(y|x)p(x)}[\\lVert s_{\\theta}(y) - \\nabla_y \\log p(y|x)\\rVert^2]+C. \\end{aligned} $$ One problem with denoising score matching is that the score network $s_{\\theta}(y)$ is inaccurate for a low noise level $\\sigma\\approx 0$. To see this, consider the score of the Gaussian convolution kernel: $$\\nabla_{y} \\log p(y|x)=\\frac{y-\\alpha x}{\\sigma^2}=-\\frac{z}{\\sigma},\\quad z\\sim \\mathcal{N}(0,I),$$ which is unbounded as $\\sigma\\to 0$. This leads to a huge variance for the estimate of $\\mathcal{L}_{DSM}(\\theta)$ for small $t$ and thus results in optimization difficulty. Nonparametric Estimator Estimate the noisy score with the target score identity using with a KDE-style estimator: $$\\nabla_y \\log p(y)\\approx\\frac{\\sum_{k=1}^K p(y|x_k)\\nabla_y \\log p(y|x_k)}{\\sum_{k=1}^K p(y|x_k)},\\quad x_k\\sim p(x).$$ This is expensive to evaluate and needs to be recomputed for different values of $y$. Proof: By definition of noisy score, we have $$ \\begin{aligned} \\nabla_y\\log p(y) \u0026amp;= \\nabla_y\\log \\int p(y|x)p(x)dx \\\\ \u0026amp;\\approx \\nabla_y\\log\\sum_{k=1}^K p(y|x_k),\\quad x_k\\sim p(x) \\\\ \u0026amp;= \\frac{\\sum_{k=1}^K \\nabla_y p(y|x_k)}{\\sum_{k=1}^K p(y|x_k)},\\quad x_k\\sim p(x) \\\\ \u0026amp;= \\frac{\\sum_{k=1}^K p(y|x_k)\\nabla_y \\log p(y|x_k)}{\\sum_{k=1}^K p(y|x_k)},\\quad x_k\\sim p(x). \\end{aligned} $$ ","date":1717200000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1717200000,"objectID":"469c034fb32abd737bd3c4b02bc90179","permalink":"https://wenlin-chen.github.io/post/score_identities/","publishdate":"2024-06-01T00:00:00Z","relpermalink":"/post/score_identities/","section":"post","summary":"Introduction Problem Setting Data distribution: $$p(x)=\\frac{\\exp(-E(x))}{Z}.$$ Intractable normalizing constant: $$Z=\\int \\exp(-E(x)) dx.$$ Tractable score function: $$\\nabla_x \\log p(x)=-\\nabla_x E(x).$$ Goal: generate new samples from $p(x)$. Sampling: The energy function $E$ is given.","tags":null,"title":"Score Identities","type":"post"},{"authors":null,"categories":null,"content":"Motivation and Applications of Tensors Tensors provide insights about how geometry works. Below are some examples that involve tensors.\nGeneral relativity (metric tensor): curved space-time, expanding universe. Quantum mechanics and quantum computing: quantum superposition (linear combination), quantum engtanglement (tensor product). Optimization. \u0026hellip; Definitions of Tensors Roughtly speaking, tensors are objects defined by the way they transform. Tensor algbra focuses on the analysis of individual tensors, which generalizes linear algebra. Tensor calculus focuses on the analysis of tensor fields, which generalizes multivariate calculus.\nFormally, there are several definitions of tensors from different perspectives.\n(Array Definition) A tensors is a multi-dimensional array, such as\nrank-0 tensor: scalar, rank-1 tensor: vector, rank-2 tensor: matrix, rank-3 tensor: ?, \u0026hellip; This is not a good definition as arrays are not what tensors fundamentally are. The array definition ignores the geometric meaning behind tensors and is not helpful for understanding geometry.\n(Coordinate Definition) A tensor is an object invariant under a change of coordinates, which has components that change in a special, predictable way under a change of coordinates.\nA tensor object itself is intrinsic and does not depend on the choice of coordinate system. The components of a tensor change under different coordinate systems in a specific way that can be figured out. We will get to this. (Algebra Definition) A tensor is a collection of vectors and covectors combined together using the tensor product.\nThis is a consice and probably the best definition of tensors. But\u0026hellip; What are covectors? What is tensor product? We will get to this. (Calculus Definition) Tensors are partial derivatives and gradients that transform with the Jacobian matrix.\nThis is also a useful definition, but we will focus on the coordinate and algebra definitions in tensor algebra. We will begin with special examples of tensors that we have seen in linear algebra and then gradually generalize the concept of tensors. For notational simplicity, we will use Einstein\u0026rsquo;s notation, which drops the summation symbols $\\sum$ since they can be inferred from the context by contracting all corresponding upper and lower indices.\nChange of Basis Consider an old basis $E=[\\mathbf{e}_1,\\cdots,\\mathbf{e}_n]$ and a new basis $\\tilde{E}=[\\tilde{\\mathbf{e}}_1,\\cdots,\\tilde{\\mathbf{e}}_n]$.\nThe forward transformation $F$ builds the new basis from the old basis: $$ \\tilde{\\mathbf{e}}_i = F^j_i\\mathbf{e}_j. $$\nThe backward transformation $B$ builds the old basis from the new basis: $$ \\mathbf{e}_i = B^j_i\\tilde{\\mathbf{e}}_j. $$\nComposing the forward and backward transformation should result in the identity transformation: $$ \\mathbf{e}_i = B^j_i F^k_j\\mathbf{e}_k $$ $$ \\implies B^j_i F^k_j =\\delta^k_i = F^k_j B^j_i. $$\nTherefore, the forward and backward transformations are inverses of each other.\nVectors and Vector Spaces A vector space $(V,S,+,\\cdot)$ consists of\n$V$: a set of vectors, $S$: a set of scalars, $+$: a vector addtion rule such that $\\mathbf{v}+\\mathbf{w}\\in V,~\\forall\\mathbf{v},\\mathbf{w}\\in V$, $\\cdot$: a vector scaling rule such that $a\\cdot\\mathbf{v}\\in V,~\\forall a\\in S,\\mathbf{v}\\in V$. We usually omit $\\cdot$ and just write $a\\mathbf{v}$ instead.\nVectors are a kind of tensor. Vectors are invariant to the coordinate systems, but the components of vectors are not.\nLet $E=[\\mathbf{e}_1,\\cdots,\\mathbf{e}_n]$ be a basis of $(V,S,+,\\cdot)$. A vector $\\mathbf{v}\\in V$ can be represented as a linear combination of the basis vectors: $$ \\mathbf{v}= v^i \\mathbf{e}_i, $$ where the components $v^i\\in S$ of $\\mathbf{v}$ in the basis $E$ are $$ \\mathbf{v}= \\begin{bmatrix} v^1 \\\\ \\vdots \\\\ v^n \\end{bmatrix}_{E} $$ This tells us that column vectors are the array representations of vectors, which is the array definition of vectors.\nGeometrically, vectors are arrows (directed line segments).\nVector Transformation Let\u0026rsquo;s represent the vector components of $\\mathbf{v}$ in a different basis $\\tilde{E}$: $$ \\mathbf{v}=\\tilde{v}^j \\tilde{\\mathbf{e}}_j = \\tilde{v}^jF^i_j\\mathbf{e}_i = (F^i_j\\tilde{v}^j)\\mathbf{e}_i. $$ But in the basis $E$, we have $\\mathbf{v}=v^i \\mathbf{e}_i$. This implies that $$ v^i = F^i_j\\tilde{v}^j. $$\nLikewise, we have $$ \\tilde{v}^j \\tilde{\\mathbf{e}}_j=\\mathbf{v}=v^i \\mathbf{e}_i =v^i B^j_i\\tilde{\\mathbf{e}}_j = (B^j_i v^i) \\tilde{\\mathbf{e}}_j, $$ $$ \\implies \\tilde{v}^j = B^j_i v^i. $$\nLet\u0026rsquo;s now compare a change of basis to vector transformation: $$ \\tilde{\\mathbf{e}}_j = F^i_j\\mathbf{e}_i \\quad\\quad \\mathbf{e}_j = B^i_j\\tilde{\\mathbf{e}}_i $$ $$ v^i = F^i_j\\tilde{v}^j \\quad\\quad \\tilde{v}^i = B^i_j v^j $$\nIt is interesting to note that vector transformation behaves contrarily to a change of basis.\nChange of basis: Forward transformation changes the old basis into the new basis. Backward transformation changes the new basis into the old basis. Vector transformation: Forward transformation changes the vector components from the new basis to the old basis. Backward transformation changes the vector components from the old basis to the new basis. We say that vector components are contravariant because they contra-vary with a change of basis. As a reminder, we always put the indices of the vector components above the letters. We say that basis vectors are covariant and put the indices of the basis vectors below the letters.\nCovectors and Dual Vector Spaces Covectors (linear forms) are functions $\\alpha: V\\to S$ that map the vectors in $V$ to the scalars in $S$ such that\n$\\alpha(\\mathbf{v}+\\mathbf{w})=\\alpha(\\mathbf{v})+\\alpha(\\mathbf{w}),~\\forall \\mathbf{v},\\mathbf{w}\\in V$. $\\alpha(n\\mathbf{v})=n\\alpha(\\mathbf{v}),\\forall n\\in S,\\mathbf{v}\\in V$. The dual vector space $(V^*,S,+\u0026rsquo;,\\cdot\u0026rsquo;)$ of a vector space $(V,S,+,\\cdot)$ is a vector space with\nthe same set $S$ of scalars a different set $V^*$ of vectors ($\\alpha\\in V^*$ are covectors), different addition ($+\u0026rsquo;$) and scaling ($\\cdot\u0026rsquo;$) rules such that $(n\\cdot\\alpha)(\\mathbf{v})=n\\alpha(\\mathbf{v}),~\\forall n\\in S,\\alpha\\in V^*,\\mathbf{v}\\in V$. $(\\alpha+\\beta)(\\mathbf{v})=\\alpha(\\mathbf{v})+\\beta(\\mathbf{v}),~\\forall\\alpha,\\beta\\in V^*,\\mathbf{v}\\in V$. As shown above, we usually just write $+$ and $\\cdot$ when we add and scale covectors in $V^*$ but need to remember that the addition and scaling rules in $V^*$ are actually different from those in $V$.\nDual Basis and Covector Components Covectors are a kind of tensor. Covectors are invariant to the coordinate systems, but the components of covectors are not.\nTake the basis $E=[\\mathbf{e}_1,\\cdots,\\mathbf{e}_n]$ for a vector space $V$. We introduce the (Kronecker) dual basis $\\mathcal{E}=[\\epsilon^1,\\cdots,\\epsilon^n]^T$ ($\\epsilon^i:V\\to S$) for its dual vector space $V^*$: $$ \\epsilon^i(\\mathbf{e}_j)=\\delta^i_j. $$\nEach covector $\\epsilon^i\\in V^*$ in the dual basis outputs the corresponding vector component $v^i$ in the basis $E$: $$ \\epsilon^i(\\mathbf{v})=\\epsilon^i\\left( v^j \\mathbf{e}_j \\right)=v^j \\epsilon^i(\\mathbf{e}_j)=v^j\\delta^i_j=v^i. $$\nFor any covector $\\alpha\\in V^*$, we define $$ \\alpha(\\mathbf{e}_i)=\\alpha_i. $$\nNow, a covector $\\alpha\\in V^*$ can be represented as $$ \\alpha(\\mathbf{v})=\\alpha\\left(v^i \\mathbf{e}_i \\right)=v^i \\alpha(\\mathbf{e}_i) = \\alpha_i \\epsilon^i(\\mathbf{v})=(\\alpha_i \\epsilon^i)(\\mathbf{v}). $$ $$ \\implies \\alpha = \\alpha_i \\epsilon^i. $$\nTherefore, the covector components in the dual basis $\\mathcal{E}$ are $$ \\alpha=[\\alpha_1, \\cdots, \\alpha_n]_{\\mathcal{E}}. $$\nThis tells us that row vectors are the array representation of covectors, which is the array definition of covectors.\nGeometrically, a covector is a stack of linearly spaced, straight contour lines. A covector maps a vector into a scalar specified by the number of covector contour lines that the vector covers.\nChange of Dual Basis and Covector Transformation Consider an old dual basis $\\mathcal{E}=[\\epsilon^1,\\cdots,\\epsilon^n]^T$ and a new dual basis $\\tilde{\\mathcal{E}}=[\\tilde{\\epsilon}^1,\\cdots,\\tilde{\\epsilon}^n]^T$ for $V^*$. Let\u0026rsquo;s build the new dual basis from the old dual basis using a transformation $Q$: $$ \\tilde{\\epsilon}^i=Q^i_j\\epsilon^j. $$ Applying forward transformation to $\\tilde{\\mathbf{e}}_k$ in $\\tilde{\\epsilon}^i(\\tilde{\\mathbf{e}}_k)$ gives $$ \\tilde{\\epsilon}^i(\\tilde{\\mathbf{e}}_k)=Q^i_j\\epsilon^j(\\tilde{\\mathbf{e}}_k)= Q^i_j\\epsilon^j\\left(F^l_k\\mathbf{e}_l\\right)=Q^i_j \\epsilon^j(\\mathbf{e}_l) F^l_k=Q^i_j \\delta^j_l F^l_k= Q^i_j F^j_k. $$ But we know that $\\tilde{\\epsilon}^i(\\tilde{\\mathbf{e}}_k)=\\delta^i_k$ by definition. This implies that $$ Q^i_j F^j_k=\\delta^i_k\\quad\\implies\\quad Q=B. $$ Therefore, we build the new dual basis from the old dual basis using the backward transformation: $$ \\tilde{\\epsilon}^i=B^i_j\\epsilon^j. $$ Likewise, we build the old dual basis from the new dual basis using the forward transformation: $$ \\epsilon^i=F^i_j\\tilde{\\epsilon}^j. $$ Let\u0026rsquo;s now compare a change of basis to a change of dual basis: $$ \\tilde{\\mathbf{e}}_j = F^i_j\\mathbf{e}_i \\quad\\quad \\mathbf{e}_j = B^i_j\\tilde{\\mathbf{e}}_i $$ $$ \\epsilon^i=F^i_j\\tilde{\\epsilon}^j \\quad\\quad \\tilde{\\epsilon}^i=B^i_j \\epsilon^j $$ It is interesting to note that a change of dual basis behaves contrarily to a change of basis.\nAs for covector component transformation, we first represent a covector in two dual bases: $$ \\alpha = \\alpha_i\\epsilon^i = \\tilde{\\alpha}_j\\tilde{\\epsilon}^j. $$ But changing the dual basis gives $$ \\alpha = \\alpha_i\\epsilon^i = \\alpha_i F^i_j\\tilde{\\epsilon}^j= (F^i_j\\alpha_i)\\tilde{\\epsilon}^j. $$ This implies that the forward transformation changes the covector components from the old dual basis to the new dual basis: $$ \\tilde{\\alpha}_j = F^i_j\\alpha_i. $$ Likewise, the backward transformation changes the covector components from the new dual basis to the old dual basis: $$ \\alpha_j = B^i_j\\tilde{\\alpha}_i. $$ This tells us covector transformation is covariant to a change of basis and contravariant to a change of dual basis.\nLet\u0026rsquo;s now summarize what we have learned so far about changes of basis/dual basis and vector/covector transformations: $$ \\tilde{\\mathbf{e}}_j = F^i_j\\mathbf{e}_i \\quad\\quad \\mathbf{e}_j = B^i_j\\tilde{\\mathbf{e}}_i \\quad\\quad\\text{and}\\quad\\quad v^i = F^i_j\\tilde{v}^j \\quad\\quad \\tilde{v}^i = B^i_j v^j $$ $$ \\epsilon^i= F^i_j\\tilde{\\epsilon}^j \\quad\\quad ~ \\tilde{\\epsilon}^i= B^i_j\\epsilon^j \\quad\\quad\\text{and}\\quad\\quad \\tilde{\\alpha}_j = F^i_j\\alpha_i \\quad\\quad \\alpha_j = B^i_j\\tilde{\\alpha}_i $$\nLinear Maps Linear maps $L:V\\to W$ map vectors in $V$ to vectors in $W$ such that\n$L(\\mathbf{v}+\\mathbf{w})=L(\\mathbf{v})+L(\\mathbf{w})$, $L(n\\mathbf{v})=nL(\\mathbf{v})$. Let\u0026rsquo;s consider a speical case where $W=V$ from now on. In the array definition, linear maps are matrices that transform column vectors but do not transform basis. We define the transformation of a copy of each basis vector under a linear map $L$ by $$ L(\\mathbf{e}_i)=L^j_i\\mathbf{e}_j. $$ This defines a matrix which contains the linear map components in the basis $E$: $$ L=\\begin{bmatrix} L^1_1 \u0026amp; \\cdots \u0026amp; L^1_n \\\\ \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ L^n_1 \u0026amp; \\cdots \u0026amp; L^n_n \\end{bmatrix}_{E}. $$ Let $\\mathbf{v}=\\sum_{i=1}^n v^i \\mathbf{e}_i$ and $\\mathbf{w}=\\sum_{i=1}^n w^i \\mathbf{e}_i$ respectively be the input and output vectors represented in the basis $E$. Then, we have $$ \\mathbf{w}=L(\\mathbf{v})=L( v^i \\mathbf{e}_i )=v^i L(\\mathbf{e}_i)=v^i L^j_i\\mathbf{e}_j=(L^j_i v^i ) \\mathbf{e}_j, $$ $$ \\implies w^i = L^i_j v^j. $$ This is essentially the usual matrix-vector multiplication rule: $$ \\begin{bmatrix} w^1 \\\\ \\vdots \\\\ w^n \\end{bmatrix}_{E}= \\begin{bmatrix} L^1_1 \u0026amp; \\cdots \u0026amp; L^1_n \\\\ \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ L^n_1 \u0026amp; \\cdots \u0026amp; L^n_n \\end{bmatrix}_{E} \\begin{bmatrix} v^1 \\\\ \\vdots \\\\ v^n \\end{bmatrix}_{E}. $$ It is important to note that\nThe transformed vectors are in the same basis as the input vectors. The $i$-th column vector in a matrix is what a copy of the $i$-th basis vector will be transformed into. Geometrically, linear maps are spatial transformations that keep lines parallel, keep lines evenly spaced, and keep the origin unchanged. A linear map can be a combination of vector scaling and rotation but not vector translation.\nLinear Map Transformation Linear maps are a kind of tensor. Linear maps are invariant to the coordinate systems, but the components of linear maps are not.\nLet\u0026rsquo;s transform a linear map from an old basis $E$ to a new basis $\\tilde{E}$. By definition, we have $$ L(\\tilde{\\mathbf{e}}_i)=\\tilde{L}^l_i \\tilde{\\mathbf{e}}_l. $$ But we also have $$ L(\\tilde{\\mathbf{e}}_i)=L( F^j_i \\mathbf{e}_j )=F^j_i L(\\mathbf{e}_j) = F^j_i L^k_j \\mathbf{e}_k = F^j_i L^k_j B^l_k \\tilde{\\mathbf{e}}_l = ( B^l_k L^k_j F^j_i ) \\tilde{\\mathbf{e}}_l. $$ This implies that $$ \\tilde{L}^l_i = B^l_k L^k_j F^j_i. $$\nNote that multiplying by the identity transformation $I$ does not change a matrix: $$ (LI)^i_k = L^i_j \\delta^j_k = L^i_k. $$ Then, the backward transformation for the linear map is given by $$ F^s_l \\tilde{L}^l_i B^i_t = F^s_l B^l_k L^k_j F^j_i B^i_t = \\delta^s_k L^k_j \\delta^j_t = L^s_t. $$\nLet\u0026rsquo;s classify the tensors we have learned so far. Note that by vectors, covectors, linear maps and any other tensors (excluding the bases and dual bases), we always mean the components.\n(0,1)-tensors (covariant): Basis: $$ \\tilde{\\mathbf{e}}_j = F^i_j \\mathbf{e}_i \\quad\\quad \\mathbf{e}_j = B^i_j \\tilde{\\mathbf{e}}_i $$ Covectors: $$ \\tilde{\\alpha}_j = F^i_j \\alpha_i \\quad\\quad \\alpha_j = B^i_j \\tilde{\\alpha}_i $$ (1,0)-tensors (contravariant): Dual basis: $$ \\tilde{\\epsilon}^i = B^i_j\\epsilon^j \\quad\\quad \\epsilon^i = F^i_j\\tilde{\\epsilon}^j $$ Vectors: $$ \\tilde{v}^i = B^i_j v^j \\quad\\quad v^i = F^i_j\\tilde{v}^j $$ (1,1)-tensors (one contravariant dimension, one covariant dimension): Linear maps: $$ \\tilde{L}^i_j = B^i_k L^k_l F^l_j \\quad\\quad L^i_j = F^i_k \\tilde{L}^k_l B^l_j $$ Bilinear Forms, Metric Tensors and Their Transformations Metric tensors $g:V\\times V\\to S$ are speical bilinear forms that define dot products between vectors such that\n$ag(\\mathbf{v},\\mathbf{w})=g(a\\mathbf{v},\\mathbf{w})=g(\\mathbf{v},a\\mathbf{w}),~\\forall a\\in S,~\\forall\\mathbf{v},\\mathbf{w}\\in V$. $g(\\mathbf{v}+\\mathbf{u},\\mathbf{w})=g(\\mathbf{v},\\mathbf{w}) + g(\\mathbf{u},\\mathbf{w}),~\\forall\\mathbf{v},\\mathbf{u},\\mathbf{w}\\in V$. $g(\\mathbf{v},\\mathbf{w}+\\mathbf{t})=g(\\mathbf{v},\\mathbf{w}) + g(\\mathbf{v},\\mathbf{t}),~\\forall\\mathbf{v},\\mathbf{w},\\mathbf{t}\\in V$. $g(\\mathbf{v},\\mathbf{w})=g(\\mathbf{w},\\mathbf{v}),~\\forall\\mathbf{v},\\mathbf{w}\\in V$. $g(\\mathbf{v},\\mathbf{v})\\geq 0,~\\forall\\mathbf{v}\\in V$. Note that 1-3 are rules for general bilinear forms. Rules 4-5 are special for metric tensors, so metric tensors must be symmetric (4) and positive semi-definite (5).\nMetric tensors define the dot product between two vectors $\\mathbf{v}$ and $\\mathbf{w}$ in a basis $E$: $$ g(\\mathbf{v},\\mathbf{w})=g(v^i \\mathbf{e}_i,w^j \\mathbf{e}_j)=v^i w^j g(\\mathbf{e}_i,\\mathbf{e}_j). $$ The array representation of a metric tensor $g$ in the basis $E$ is defined as $$ g_{ij}=g(\\mathbf{e}_i,\\mathbf{e}_j), $$ Therefore, the dot product in the basis $E$ becomes $$ g(\\mathbf{v},\\mathbf{w})=v^i w^j g_{ij}. % \\begin{bmatrix} % v^1 \u0026amp; \\cdots \u0026amp; v^n % \\end{bmatrix}_{E} % \\begin{bmatrix} % g_{11} \u0026amp; \\cdots \u0026amp; g_{1n} \\\\ % \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ % g_{n1} \u0026amp; \\cdots \u0026amp; g_{nn} % \\end{bmatrix}_{E} % \\begin{bmatrix} % w^1 \\\\ % \\vdots \\\\ % w^n % \\end{bmatrix}_{E}. $$\nUsing dot products, we respectively define the norm $\\lVert\\cdot\\rVert$ of a vector and the angle $\\left\u0026lt;\\cdot,\\cdot\\right\u0026gt;$ between two vectors as $$ \\lVert\\mathbf{v}\\rVert^2 = g(\\mathbf{v},\\mathbf{v})=v^i v^j g_{ij}\\geq 0, $$ $$ \\cos\\left\u0026lt;\\mathbf{v},\\mathbf{w}\\right\u0026gt;=\\frac{g(\\mathbf{v},\\mathbf{w})}{\\lVert\\mathbf{v}\\rVert\\lVert\\mathbf{w}\\rVert}=\\frac{v^i w^j g_{ij}}{\\sqrt{v^i v^j g_{ij}}\\sqrt{w^i w^j g_{ij}}}. $$\nFor an orthonormal basis $E$, the metric tensor is given by the identity matrix $g_{ij}=g(\\mathbf{e}_i,\\mathbf{e}_j)=\\delta_{ij}$. This gives us the usual dot product $g(\\mathbf{v},\\mathbf{w})=v^i w^i$ and the Pythagorean theorem $\\lVert\\mathbf{v}\\rVert^2=v^iv^i$.\nMetric tensors are invariant to the coordinate systems, but the components of metric tensors are not. Let\u0026rsquo;s now a transform metric tensor (or more generally, a bilinear form) from an old basis $E$ to a new basis $\\tilde{E}$: $$ \\tilde{g}_{ij}=g(\\tilde{\\mathbf{e}}_i,\\tilde{\\mathbf{e}}_j)=g(F^k_i \\mathbf{e}_k,F^l_j \\mathbf{e}_l)=F^k_iF^l_j g(\\mathbf{e}_k,\\mathbf{e}_l)=F^k_iF^l_jg_{kl}. $$ Likewise, the metric tensor transformation from $\\tilde{E}$ to $E$ is given by the inverse of the above transformation $$ g_{kl}=g(\\mathbf{e}_k,\\mathbf{e}_l)=g(B^i_k \\tilde{\\mathbf{e}}_i,B^j_l \\tilde{\\mathbf{e}}_j)=B^i_k B^j_l g(\\tilde{\\mathbf{e}}_i,\\tilde{\\mathbf{e}}_j)=B^i_k B^j_l \\tilde{g}_{ij}. $$ Metric tensors (and general bilinear forms) are (0,2)-tensors since both dimensions in a metric tensor are covariant (to a change of basis).\nWe can also show that the results of dot products are identical in different bases: $$ g(\\mathbf{v},\\mathbf{w})=v^i w^j g_{ij}=(F^i_k\\tilde{v}^k)(F^j_l\\tilde{v}^l) B^s_i B^t_j \\tilde{g}_{st}=(B^s_i F^i_k)(B^t_jF^j_l)\\tilde{v}^k\\tilde{v}^l\\tilde{g}_{st} = \\delta^s_k \\delta^t_l \\tilde{v}^k\\tilde{v}^l\\tilde{g}_{st}=\\tilde{v}^s\\tilde{v}^t\\tilde{g}_{st}. $$\nGeneral Linear Forms and Tensors In general, we define an $n$-(linear) form to be a linear function $V\\times V\\times \\cdots \\times V=V^n\\to S$, which is a (0,$n$)-tensor or a rank-$n$ covector. Covectors are linear forms or 1-linear forms. Bilinear forms are 2-linear forms.\nA general ($m$,$n$)-tensor $T$ is a tensor with $m$ contravariant dimensions and $n$ covariant dimensions. General tensor transformations are defined as $$ \\tilde{T}^{abc\\cdots}_{xyz\\cdots}=(B^a_i B^b_j B^c_k\\cdots ) T^{ijk\\cdots}_{rst\\cdots} (F^r_x F^s_y F^t_z\\cdots), $$ $$ T^{ijk\\cdots}_{rst\\cdots}=(F^i_a F^j_b F^k_c\\cdots ) \\tilde{T}^{abc\\cdots}_{xyz\\cdots} (B^x_r B^y_s B^z_t\\cdots). $$ We will derive this transformation rule using tensor products later.\nExamples of Tensor Products In general, tensors can be constructed by combining vectors and covectors using tensor product. We first give a few examples of redefining tensors that we have learned using tensor products below.\nLinear maps are tensor products of vector-covector pairs: $$ L=L^i_j\\mathbf{e}_i\\otimes\\epsilon^j. $$ We can verify the definition of linear maps: $$ \\mathbf{w}=L(\\mathbf{v})=L^i_j\\mathbf{e}_i\\otimes\\epsilon^j(v^k\\mathbf{e}_k)=L^i_j v^k \\mathbf{e}_i\\otimes\\epsilon^j(\\mathbf{e}_k)=L^i_j v^k \\mathbf{e}_i \\delta^j_k = L^i_j v^j \\mathbf{e}_i, $$ and the transformation of linear maps: $$ L=L^k_l\\mathbf{e}_k\\otimes\\epsilon^l=L^k_l(B^i_k\\tilde{\\mathbf{e}}_i)\\otimes(F^l_j\\tilde{\\epsilon}^j)= (B^i_k L^k_l F^l_j) \\tilde{\\mathbf{e}}_i \\otimes \\tilde{\\epsilon}^j=\\tilde{L}^i_j \\tilde{\\mathbf{e}}_i \\otimes \\tilde{\\epsilon}^j $$ $$ \\implies \\tilde{L}^i_j = B^i_k L^k_l F^l_j. $$\nBilinear forms (including metric tensors) are tensor products of covector-covector pairs: $$ \\mathcal{B}=\\mathcal{B}_{ij}\\epsilon^i\\otimes\\epsilon^j. $$ We can verify the definition of bilinear forms: $$ \\begin{aligned} s \u0026amp;= \\mathcal{B}(\\mathbf{v},\\mathbf{w})=\\mathcal{B}_{ij}(\\epsilon^i\\otimes\\epsilon^j)(\\mathbf{v},\\mathbf{w})=\\mathcal{B}_{ij}\\epsilon^i(\\mathbf{v})\\otimes\\epsilon^j(\\mathbf{w})=\\mathcal{B}_{ij}\\epsilon^i(v^k\\mathbf{e}_k)\\otimes\\epsilon^j(w^l\\mathbf{e}_l) \\\\ \u0026amp;=\\mathcal{B}_{ij}v^k w^l\\epsilon^i(\\mathbf{e}_k)\\otimes\\epsilon^j(\\mathbf{e}_l)=\\mathcal{B}_{ij}v^k w^l \\delta^i_k \\delta^j_l=\\mathcal{B}_{ij}v^i w^j, \\end{aligned} $$ and the transformation of bilinear forms: $$ \\mathcal{B}=\\mathcal{B}_{kl}\\epsilon^k\\otimes\\epsilon^l=\\mathcal{B}_{kl}(F^k_i\\tilde{\\epsilon}^i)\\otimes(F^l_j\\tilde{\\epsilon}^j)=F^k_i F^l_j\\mathcal{B}_{kl}\\tilde{\\epsilon}^i\\otimes\\tilde{\\epsilon}^j=\\tilde{\\mathcal{B}}_{ij}\\tilde{\\epsilon}^i\\otimes\\tilde{\\epsilon}^j $$ $$ \\implies \\tilde{\\mathcal{B}}_{ij} = F^k_i F^l_j\\mathcal{B}_{kl}. $$\nGeneral Tensor Products and Kronecker Products A general ($m$,$n$)-tensor can be defined by combining $m$ vectors $\\mathbf{e}_i,\\mathbf{e}_j,\\mathbf{e}_k,\\cdots$ and $n$ covectors $\\epsilon^r,\\epsilon^s,\\epsilon^t,\\cdots$ using tensor products: $$ T = T^{ijk\\cdots}_{rst\\cdots}(\\mathbf{e}_i\\otimes\\mathbf{e}_j\\otimes\\mathbf{e}_k\\otimes\\cdots)\\otimes (\\epsilon^r\\otimes\\epsilon^s\\otimes\\epsilon^t\\otimes\\cdots). $$ Applying changes of bases and dual bases, we obtain $$ \\begin{aligned} T \u0026amp;= T^{ijk\\cdots}_{rst\\cdots}(B^a_i\\tilde{\\mathbf{e}}_a\\otimes B^b_j\\tilde{\\mathbf{e}}_b\\otimes B^c_k\\tilde{\\mathbf{e}}_c\\otimes\\cdots)\\otimes (F^r_x\\tilde{\\epsilon}^x\\otimes F^s_y\\tilde{\\epsilon}^y\\otimes F^t_z \\tilde{\\epsilon}^z\\otimes\\cdots) \\\\ \u0026amp;= (B^a_i B^b_j B^c_k\\cdots) T^{ijk\\cdots}_{rst\\cdots} (F^r_x F^s_y F^t_z \\cdots) (\\tilde{\\mathbf{e}}_a\\otimes \\tilde{\\mathbf{e}}_b\\otimes \\tilde{\\mathbf{e}}_c\\otimes\\cdots)\\otimes (\\tilde{\\epsilon}^x\\otimes \\tilde{\\epsilon}^y\\otimes \\tilde{\\epsilon}^z\\otimes\\cdots). \\end{aligned} $$ But the definition of the tensor $T$ in the new bases and dual bases is $$ T = \\tilde{T}^{abc\\cdots}_{xyz\\cdots}(\\tilde{\\mathbf{e}}_a\\otimes \\tilde{\\mathbf{e}}_b\\otimes \\tilde{\\mathbf{e}}_c\\otimes\\cdots)\\otimes (\\tilde{\\epsilon}^x\\otimes \\tilde{\\epsilon}^y\\otimes \\tilde{\\epsilon}^z\\otimes\\cdots). $$ This gives us the general tensor transformation rule: $$ \\tilde{T}^{abc\\cdots}_{xyz\\cdots}=(B^a_i B^b_j B^c_k\\cdots ) T^{ijk\\cdots}_{rst\\cdots} (F^r_x F^s_y F^t_z\\cdots). $$\nWhen we apply an ($m$,$n$)-tensor tensor $T$ to an ($n$,0)-tensor (or a rank-$n$ vector) $D$, we will obtain an ($m$,0)-tensor (or a rank-$m$ vector) $T(D)$. This is a generalization of applying a (rank-1) covector (i.e., a (1,0)-tensor) to a $rank-1$ vector (i.e., a (0,1)-tensor) resulting in a scalar (i.e., a (0,0)-tensor).\nSpecifically, suppose that $$ D = D^{opq\\cdots}(\\mathbf{e}_o\\otimes\\mathbf{e}_p\\otimes\\mathbf{e}_q\\otimes\\cdots). $$ Then, we have $$ T(D)=T^{ijk\\cdots}_{rst\\cdots}(\\mathbf{e}_i\\otimes\\mathbf{e}_j\\otimes\\mathbf{e}_k\\otimes\\cdots)\\otimes (\\epsilon^r\\otimes\\epsilon^s\\otimes\\epsilon^t\\otimes\\cdots)(D^{opq\\cdots}\\mathbf{e}_o\\otimes\\mathbf{e}_p\\otimes\\mathbf{e}_q\\otimes\\cdots). $$ Note that there are multiple ways in which we can associate each covector with a vector in $(T_{rst\\cdots}\\epsilon^r\\otimes\\epsilon^s\\otimes\\epsilon^t\\otimes\\cdots)(D^{opq\\cdots}\\mathbf{e}_o\\otimes\\mathbf{e}_p\\otimes\\mathbf{e}_q\\otimes\\cdots)$. To avoid ambiguity, we should always clearly specify such association using Einstein\u0026rsquo;s notation. That is, whether it means $T(D)=T^{ijk\\cdots}_{rst\\cdots} D^{rst\\cdots}$ or $T(D)=T^{ijk\\cdots}_{rst\\cdots} D^{rts\\cdots}$ or anything else.\nNote that a tensor is a multilinear map, which is linear when all inputs except one are held constant:\n$T(x_1,\\cdots,nx_i,\\cdots,x_n)=nT(x_1,\\cdots,x_i,\\cdots,x_n),~\\forall i$, $T(x_1,\\cdots,x_i+y_i,\\cdots,x_n)=T(x_1,\\cdots,x_i,\\cdots,x_n)+T(x_1,\\cdots,y_i,\\cdots,x_n),~\\forall i$. Kronecker products are tensor products expressed in the array representation of tensors. For examples, matrices are Kronecker products of (column vector, row vector) pairs, and metric tensors are Kronecker products of (row vector, row vector) pairs.\nTensor Product Spaces Let $n\\in S$ be a scalar, $\\mathbf{v},\\mathbf{u}\\in V$ be vectors, and $\\alpha,\\beta\\in V^*$ be covectors. Tensor products satisfy the following rules\n$n(\\mathbf{v}\\otimes\\alpha)=(n\\mathbf{v})\\otimes\\alpha=\\mathbf{v}\\otimes(n\\alpha)$, $\\mathbf{v}\\otimes\\alpha+\\mathbf{v}\\otimes\\beta=\\mathbf{v}\\otimes(\\alpha+\\beta)$, $\\mathbf{v}\\otimes\\alpha+\\mathbf{u}\\otimes\\alpha=(\\mathbf{v}+\\mathbf{u})\\otimes\\alpha$. We can form tensor product spaces $V\\otimes V$, $V\\times V^*$, $V^*\\times V$, and $V^*\\times V^*$ using tensor products, and we can continue forming larger tensor products such as $V\\otimes V^* \\otimes V \\otimes \\cdots$ and so forth. A tensor space associated with a tensor $T$ contains elements obtained by any number of summations with $T$ in any order.\nFor example, consider a tensor space $V^* \\otimes V \\otimes V^* \\otimes V^*$ associated with the tensor $T^{~j}_{i~kl}\\epsilon^i\\mathbf{e}_j\\epsilon^k\\epsilon^l$. Below are some example elements in this tensor space:\n$T^{~j}_{i~kl} v^i \\alpha_j w^k u^l\\quad V \\times V^* \\times V \\times V \\to S$, $T^{~j}_{i~kl} U^{ikl}\\beta_j\\quad (V \\otimes V \\otimes V)\\times V^* \\to S$, $T^{~j}_{i~kl} \\alpha_j D^{kl}\\quad V^* \\times (V \\otimes V) \\to V^*$, $T^{~j}_{i~kl} L^i_j \\quad (V \\otimes V^*)\\to (V^* \\otimes V^*)$, \u0026hellip; Musical Isomorphism We would like to find a meaningful partner covector $\\nu=v_i\\epsilon^i\\in V^*$ for each vector $\\mathbf{v}=v^i\\mathbf{e}_i\\in V$. It turns out that one such partnership is called musical isomorphism, which is defined using the metric tensor $g\\in V^*\\otimes V^*$ (i.e., dot product).\nMusical isomorphism defines the partner of the vector $\\mathbf{v}\\in V$ as the linear function $\\nu:V\\to S$ such that $$ \\nu=g(\\cdot,\\mathbf{v})=g_{ik}\\epsilon^i\\otimes\\epsilon^k(v^j\\mathbf{e}_j)=g_{ik}v^j\\epsilon^i\\otimes\\epsilon^k(\\mathbf{e}_j)=g_{ik} v^j \\epsilon^i\\delta^k_j=(g_{ij}v^j)\\epsilon^i. $$ But we have $\\nu=v_i\\epsilon^i$ by definition. This defines the flat operation which lowers the index of the components $v^j$ of the vector $\\mathbf{v}$ by $$ v_i=g_{ij}v^j. $$ Therefore, the partner covector $\\nu$ for the vector $\\mathbf{v}$ is given by $$ \\nu=v_i\\epsilon^i=g_{ij}v^j\\epsilon^i. $$\nAnother way to think about the flat operation for lowering vector component indices $v^i$ is to consider the dot product between the corresponding basis vector $\\mathbf{e}_i$ and the vector $\\mathbf{v}$: $$ v_i=g(\\mathbf{e}_i,\\mathbf{v})=g(\\mathbf{e}_i,v^j\\mathbf{e}_j)=v^j g(\\mathbf{e}_i,\\mathbf{e}_j)=g_{ij}v^j. $$ Geometrically, this tells us that $v_i$ is the projection of the vector $\\mathbf{v}$ onto the basis vector $\\mathbf{e}_i$. Note that $v^i\\not=v_i$ in general. The only exception is in the orthonormal basis where we have $$ v_i=g_{ij}v^j=\\delta_{ij}v^j=v^i. $$\nThis is a meaningful partnership because it holds in any basis by definition: $$ \\tilde{v}_i=\\tilde{g}_{ij}\\tilde{v}^j \\quad\\text{and}\\quad\\nu=\\tilde{v}_i\\tilde{\\epsilon}^i=\\tilde{g}_{ij}\\tilde{v}^j\\tilde{\\epsilon}^i. $$\nWe can define the inverse of the metric tensor as $h^{ki}\\in V\\otimes V$ such that composing $g$ and $h$ results in the identity: $$ h^{ij}g_{jk}=\\delta^i_k. $$ Then, the sharp operation which raises the index of the components $v_j$ of the covector $\\nu$ (i.e., the inverse of the flat operation) can be derived as follows: $$ h^{ij}v_j=h^{ij}g_{jk}v^k=\\delta^i_k v^k=v^i, $$ $$ \\mathbf{v}=v^i\\mathbf{e}_i=h^{ij}v_j\\mathbf{e}_i. $$ Likewise, this holds in any basis by definition: $$ \\tilde{v}^i=\\tilde{h}^{ij}\\tilde{v}_j, $$ $$ \\mathbf{v}=\\tilde{v}^i\\tilde{\\mathbf{e}}_i=\\tilde{h}^{ij}\\tilde{v}_j\\tilde{\\mathbf{e}}_i. $$\nThe flat and sharp operations for lowering and raising indices can be applied to tensors of any rank in general. For example, consider the tensor $T=T^i_{jk}\\mathbf{e}_i\\otimes\\epsilon^j\\otimes\\epsilon^k\\in V\\otimes V^* \\otimes V^*$. We can raise the index $j$ by $T^i_{jk}h^{jl}=T^{il}_k$, which results in a new tensor $T\u0026rsquo;=T^{il}_k \\mathbf{e}_i\\otimes\\mathbf{e}_l\\otimes\\epsilon^k\\in V\\otimes V \\otimes V^*$.\n","date":1704412800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704412800,"objectID":"8a05ac4ffe17026cd3c7830507ad3e99","permalink":"https://wenlin-chen.github.io/post/tensor_algebra/","publishdate":"2024-01-05T00:00:00Z","relpermalink":"/post/tensor_algebra/","section":"post","summary":"Motivation and Applications of Tensors Tensors provide insights about how geometry works. Below are some examples that involve tensors.\nGeneral relativity (metric tensor): curved space-time, expanding universe. Quantum mechanics and quantum computing: quantum superposition (linear combination), quantum engtanglement (tensor product).","tags":null,"title":"Tensor Algebra","type":"post"},{"authors":["Wen Wu","Wenlin Chen","Chao Zhang","Philip C. Woodland"],"categories":null,"content":"","date":1696032000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696032000,"objectID":"a813e18c87043788c6c22b08f0d565dd","permalink":"https://wenlin-chen.github.io/publication/wu2023has/","publishdate":"2023-09-30T00:00:00Z","relpermalink":"/publication/wu2023has/","section":"publication","summary":"Human annotator simulation (HAS) serves as a cost-effective substitute for human evaluation such as data annotation and system assessment. Human perception and behaviour during human evaluation exhibit inherent variability due to diverse cognitive processes and subjective interpretations, which should be taken into account in modelling to better mimic the way people perceive and interact with the world. This paper introduces a novel meta-learning framework that treats HAS as a zero-shot density estimation problem, which incorporates human variability and allows for the efficient generation of human-like annotations for unlabelled test inputs. Under this framework, we propose two new model classes, conditional integer flows and conditional softmax flows, to account for ordinal and categorical annotations, respectively. The proposed method is evaluated on three real-world human evaluation tasks and shows superior capability and efficiency to predict the aggregated behaviours of human annotators, match the distribution of human annotations, and simulate the inter-annotator disagreements.","tags":[],"title":"It HAS to be Subjective: Human Annotator Simulation via Zero-shot Density Estimation","type":"publication"},{"authors":["Wenlin Chen","Julien Horwood","Juyeon Heo","José Miguel Hernández-Lobato"],"categories":null,"content":"","date":1687824000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687824000,"objectID":"6039f5f4bbc26f58c353b25a8afbb2f9","permalink":"https://wenlin-chen.github.io/publication/chen2023leveraging/","publishdate":"2023-06-27T00:00:00Z","relpermalink":"/publication/chen2023leveraging/","section":"publication","summary":"This work extends the theory of identifiability in supervised learning by considering the consequences of having access to a distribution of tasks. In such cases, we show that identifiability is achievable even in the case of regression, extending prior work restricted to the single-task classification case. Furthermore, we show that the existence of a task distribution which defines a conditional prior over latent variables reduces the equivalence class for identifiability to permutations and scaling, a much stronger and more useful result. When we further assume a causal structure over these tasks, our approach enables simple maximum marginal likelihood optimization together with downstream applicability to causal representation learning. Empirically, we validate that our model outperforms more general unsupervised models in recovering canonical representations for synthetic and real-world data.","tags":[],"title":"Leveraging Task Structures for Improved Identifiability in Neural Network Representations","type":"publication"},{"authors":["Wenlin Chen","Austin Tripp","José Miguel Hernández-Lobato"],"categories":null,"content":"","date":1682899200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"e7e2dce54685980967029d324635a717","permalink":"https://wenlin-chen.github.io/publication/chen2023meta/","publishdate":"2022-05-05T00:00:00Z","relpermalink":"/publication/chen2023meta/","section":"publication","summary":"We propose Adaptive Deep Kernel Fitting with Implicit Function Theorem (ADKF-IFT), a novel framework for learning deep kernel Gaussian processes (GPs) by interpolating between meta-learning and conventional deep kernel learning. Our approach employs a bilevel optimization objective where we meta-learn generally useful feature representations across tasks, in the sense that task-specific GP models estimated on top of such features achieve the lowest possible predictive loss on average. We solve the resulting nested optimization problem using the implicit function theorem (IFT). We show that our ADKF-IFT framework contains previously proposed Deep Kernel Learning (DKL) and Deep Kernel Transfer (DKT) as special cases. Although ADKF-IFT is a completely general method, we argue that it is especially well-suited for drug discovery problems and demonstrate that it significantly outperforms previous state-of-the-art methods on a variety of real-world few-shot molecular property prediction tasks and out-of-domain molecular property prediction and optimization tasks.","tags":[],"title":"Meta-learning Adaptive Deep Kernel Gaussian Processes for Molecular Property Prediction","type":"publication"},{"authors":null,"categories":null,"content":"Bilevel Optimization Problem Setting Consider the following bilevel optimization problem: $$ \\begin{aligned} x^*\u0026amp;=\\underset{x}{\\operatorname{argmin}}~f(x,y^*(x))\\quad\\text{(outer optimization)}, \\\\ s.t.\\quad y^*(x)\u0026amp;=\\underset{y}{\\operatorname{argmin}}~g(x,y)\\quad\\text{(inner optimization)}. \\end{aligned} $$ Understanding the Bilevel Objective The bilevel optimization objective can be understood by separately considering the two objectives. Inner optimization: for each given value of $x$, the best response function $y^*(x)$ is defined as the value $y$ that minimizes the inner objective $g(x,y)$. Outer optimization: given the best response function $y^{*}(x)$, the optimum $x^*$ is defined as the value $x$ that minimizes the outer objective $f(x,y^{*}(x))$. This results in a nested optimization procedure as evaluating the outer objective $f(x,y^*(x))$ at each value of $x$ requires solving an inner optimization problem to obtain the best response function $y^{*}(x)$ at that value of $x$. Solving Bilevel Optimization Gradient-based Optimization The outer objective $f(x,y^{*}(x))$ can be seen as an implicit function of $x$ alone. We can calculate the hyper-gradient (i.e., total derivative) of $f(x,y^{*}(x))$ with respect to $x$ using the chain rule: $$\\frac{d f(x,y^{*}(x))}{d x}=\\frac{\\partial f(x,y^{*}(x))}{\\partial x}+\\frac{\\partial f(x,y^{*}(x))}{\\partial y^*(x)}\\frac{\\partial y^*(x)}{\\partial x}.$$ The two gradients $\\frac{\\partial f(x,y^{*}(x))}{\\partial x}$ and $\\frac{\\partial f(x,y^{*}(x))}{\\partial y^*(x)}$ can be easily calculated by automatic differentiation. Calculating the Jacobian $\\frac{\\partial y^*(x)}{\\partial x}$ is tricky, since the best response function $y^*(x)$ itself is defined by an argmin function in the inner optimization. If the inner optimization is also solved by gradient-based optimzation, then calculating the Jacobian $\\frac{\\partial y^*(x)}{\\partial x}$ naively by automatic differentiation will require tracking the gradients through many iterations of the inner optimization, which is computationally intractable in practice. Implicit Function Theorem (IFT) An important observation is that $y^*(x)$ is a critical point (i.e., minimum) of $g(x,y)$ for each given $x$. This enables us to employ Implicit Function Theorem (IFT) to calculate the Jacobian $\\frac{\\partial y^*(x)}{\\partial x}$ for any $x\u0026rsquo;$: $$\\left.\\frac{\\partial y^*(x)}{\\partial x}\\right|_{x=x\u0026rsquo;}=-\\left.\\left(\\frac{\\partial^2 g(x,y)}{\\partial y \\partial y^T}\\right)^{-1}\\frac{\\partial^2 g(x,y)}{\\partial y \\partial x^T}\\right|_{x=x\u0026rsquo;,y=y^*(x\u0026rsquo;)}.$$ The mixed partial derivatives $\\frac{\\partial^2 g(x,y)}{\\partial y \\partial x^T}$ can be easily calculated by automatic differentiation. The inverse Hessian $\\left(\\frac{\\partial^2 g(x,y)}{\\partial y \\partial y^T}\\right)^{-1}$ may be calculated exactly by automatic differentiation or approximated by Neumann approximation or conjugate gradient, depending on the size of the problem. Applications in Machine Learning Hyperparmaeter Optimization Let $x$ be the hyperparameters and $y$ be the parameters of a machine learning model. Let $f$ be the validation loss function and $g$ be the training loss function. Inner optimization corresponds to finding the optimal model parameter $y^*(x)$ by minimizing the training loss $g(x,y)$ given current hyperparameters $x$. Outer optimization corresponds to finding the optimal hyperparameters $x^*$ that minimizes the validation loss $f(x,y^{*}(x))$ given the optimal model parameters $y^{*}(x)$. Meta-learning Let $x$ be the meta-learned parameters shared across all tasks and $y$ be the task-specific parameters. Let $f$ be the validation loss function and $g$ be the training loss function. Inner optimization corresponds to finding the optimal task-specific parameters $y^*(x)$ for each task by minimizing the training loss $g(x,y)$ given current meta-learned parameters $x$ shared across all tasks. Outer optimization corresponds to finding the optimal meta-learned parameters $x^*$ that minimizes the expected validation loss $f(x,y^{*}(x))$ across tasks given the optimal task-specific parameters $y^{*}(x)$ for each task. ","date":1675209600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1675209600,"objectID":"245ebf3059b3076cbe50083274df28b3","permalink":"https://wenlin-chen.github.io/post/bilevel_optimization/","publishdate":"2023-02-01T00:00:00Z","relpermalink":"/post/bilevel_optimization/","section":"post","summary":"Bilevel Optimization Problem Setting Consider the following bilevel optimization problem: $$ \\begin{aligned} x^*\u0026amp;=\\underset{x}{\\operatorname{argmin}}~f(x,y^*(x))\\quad\\text{(outer optimization)}, \\\\ s.t.\\quad y^*(x)\u0026amp;=\\underset{y}{\\operatorname{argmin}}~g(x,y)\\quad\\text{(inner optimization)}. \\end{aligned} $$ Understanding the Bilevel Objective The bilevel optimization objective can be understood by separately considering the two objectives.","tags":null,"title":"Bilevel Optimization","type":"post"},{"authors":["Wenlin Chen","Samuel Horváth","Peter Richtárik"],"categories":null,"content":"","date":1661126400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661126400,"objectID":"eee04c746fd5fbd08cbed0a0667cb0ed","permalink":"https://wenlin-chen.github.io/publication/chen2022optimal/","publishdate":"2022-08-04T00:00:00Z","relpermalink":"/publication/chen2022optimal/","section":"publication","summary":"It is well understood that client-master communication can be a primary bottleneck in federated learning (FL). In this work, we address this issue with a novel client subsampling scheme, where we restrict the number of clients allowed to communicate their updates back to the master node. In each communication round, all participating clients compute their updates, but only the ones with \"important\" updates communicate back to the master. We show that importance can be measured using only the norm of the update and give a formula for optimal client participation. This formula minimizes the distance between the full update, where all clients participate, and our limited update, where the number of participating clients is restricted. In addition, we provide a simple algorithm that approximates the optimal formula for client participation, which allows for secure aggregation and stateless clients, and thus does not compromise client privacy. We show both theoretically and empirically that for Distributed SGD (DSGD) and Federated Averaging (FedAvg), the performance of our approach can be close to full participation and superior to the baseline where participating clients are sampled uniformly. Moreover, our approach is orthogonal to and compatible with existing methods for reducing communication overhead, such as local methods and communication compression methods.","tags":[],"title":"Optimal Client Sampling for Federated Learning","type":"publication"},{"authors":["Austin Tripp","Wenlin Chen","José Miguel Hernández-Lobato"],"categories":null,"content":"","date":1651190400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651190400,"objectID":"7c674ec1dda2935eabce28cc88b5af57","permalink":"https://wenlin-chen.github.io/publication/tripp2022evaluation/","publishdate":"2022-04-29T00:00:00Z","relpermalink":"/publication/tripp2022evaluation/","section":"publication","summary":"De novo drug design has recently received increasing attention from the machine learning community. It is important that the field is aware of the actual goals and challenges of drug design and the roles that de novo molecule design algorithms could play in accelerating the process, so that algorithms can be evaluated in a way that reflects how they would be applied in real drug design scenarios. In this paper, we propose a framework for critically assessing the merits of benchmarks, and argue that most of the existing de novo drug design benchmark functions are either highly unrealistic or depend upon a surrogate model whose performance is not well characterized. In order for the field to achieve its long-term goals, we recommend that poor benchmarks (especially logP and QED) be deprecated in favour of better benchmarks. We hope that our proposed framework can play a part in developing new de novo drug design benchmarks that are more realistic and ideally incorporate the intrinsic goals of drug design.","tags":[],"title":"An Evaluation Framework for the Objective Functions of De Novo Drug Design Benchmarks","type":"publication"},{"authors":["Wenlin Chen"],"categories":null,"content":"","date":1629331200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629331200,"objectID":"12bedca3d469d735925baf247e9638c5","permalink":"https://wenlin-chen.github.io/publication/chen2021causal/","publishdate":"2021-08-19T00:00:00Z","relpermalink":"/publication/chen2021causal/","section":"publication","summary":"In this thesis, we study causal representation learning for latent space optimization, which allows for robust and efficient generation of novel synthetic data with maximal target value.  We assume that the observed data was generated by a few latent factors, some of which are causally related to the target and others of which are spuriously correlated with the target and confounded by an environment variable. Our proposed method consists of three steps, which exploits the structure of the causal graph that describes the assumed underlying data generating process. In the first step, we recover the true data representation (i.e., the latent factors from which the observed data originated). We obtain novel identifiability theory, showing that the true data representation can be recovered up to simple transformations by a generalized version of identifiable variational auto-encoders. In the second step, we identify the causal latent factors of the target, for which we propose a practical causal inference scheme that employs (conditional) independence tests and causal discovery algorithms. Our method does not require having access to the true environment variable, which overcomes a major limitation of existing causal representation learning approaches in the literature. In the final step, we query latent points that correspond to data points with high target values by intervening upon the causal latent factors using standard latent space optimization techniques. We empirically evaluate and thoroughly analyze our method on three different tasks, including a chemical design task. We show that our method can successfully recover the true data representation in the finite data regime and correctly identify the causal latent factors of the target, which results in state-of-the-art performance for black-box optimization.","tags":[],"title":"Causal Representation Learning for Latent Space Optimization","type":"publication"},{"authors":["Andrew Webb","Charles Reynolds","Wenlin Chen","Henry Reeve","Dan Iliescu","Mikel Luján","Gavin Brown"],"categories":null,"content":"","date":1600041600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600041600,"objectID":"73540bab56f2b0d108a710976f7b0dcb","permalink":"https://wenlin-chen.github.io/publication/webb2020ensemble/","publishdate":"2020-09-14T00:00:00Z","relpermalink":"/publication/webb2020ensemble/","section":"publication","summary":"End-to-End training (E2E) is becoming more and more popular to train complex Deep Network architectures. An interesting question is whether this trend will continue—are there any clear failure cases for E2E training? We study this question in depth, for the specific case of E2E training an ensemble of networks. Our strategy is to blend the gradient smoothly in between two extremes: from independent training of the networks, up to to full E2E training. We find clear failure cases, where overparameterized models cannot be trained E2E. A surprising result is that the optimum can sometimes lie in between the two, neither an ensemble or an E2E system. The work also uncovers links to Dropout, and raises questions around the nature of ensemble diversity and multi-branch networks.","tags":[],"title":"To Ensemble or Not Ensemble: When Does End-to-End Training Fail?","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://wenlin-chen.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]